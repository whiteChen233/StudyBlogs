import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as l,e as n,b as c,d as a}from"./app-CTyT-LNo.js";const p={},i=a(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><h3 id="进程、线程、纤程-协程-虚拟线程" tabindex="-1"><a class="header-anchor" href="#进程、线程、纤程-协程-虚拟线程"><span>进程、线程、纤程(协程/虚拟线程)</span></a></h3><ul><li>进程: <ul><li>在操作系统中, 进程是基本的资源分配单位, 操作系统通过进程来管理计算机的资源, 如 CPU、内存、磁盘等</li><li>每个进程在操作系统中都有一个唯一的进程标识符: PID, 用于区分不同的进程</li></ul></li><li>线程: <ul><li>线程是操作系统中的基本执行单元, 它是进程中的一个实体, 是 CPU 调度和分派的基本单位</li><li>一个进程可以包含多个线程, 每个线程都可以独立执行不同的任务, 但它们共享进程的资源</li></ul></li><li>纤程: <ul><li>纤程可以在一个线程内创建多个纤程, 这些纤程之间共享同一个线程的资源</li><li>纤程是在同一个进程内部运行的, 不需要操作系统的介入, 可以在用户空间内实现写作式多任务助理. 因此纤程的创建和开销很小, 可以高效的利用系统资源</li></ul></li></ul><blockquote><p>可以想象一下, 把进程当成一个饭店, 把线程当成饭店里面的饭桌, 每个饭桌可以点不一样的菜, 但是都可以共享饭店的服务员、厨师, 饭桌的多少决定客户的处理效率, 而纤程就可以理解为座椅</p></blockquote><h3 id="并发、并行、串行" tabindex="-1"><a class="header-anchor" href="#并发、并行、串行"><span>并发、并行、串行</span></a></h3><ul><li>并发(Concurrent), 在操作系统中, 是指一个时间段中有几个程序都处于已启动运行到运行完毕之间, 且这几个程序都是在同一个处理机上运行</li><li>并行(Parallel), 当系统有一个以上 CPU 时, 当一个 CPU 执行一个进程时, 另一个 CPU 可以执行另一个进程, 两个进程互不抢占 CPU 资源, 可以同时进行, 这种方式我们称之为并行(Parallel)</li><li>串行(serial), 系统中的几个程序按照顺序一个一个执行</li></ul><blockquote><p>再来想象一下, 并发就是饭店里面一个厨师给很多桌做菜(雨露均沾), 并行就是饭店里面的3个厨师分别给3桌做菜, 串行就是饭店只有一个服务员, 只能一桌一桌点菜</p></blockquote><h3 id="上下文切换" tabindex="-1"><a class="header-anchor" href="#上下文切换"><span>上下文切换</span></a></h3><p>多线程往往会比单线程更快, 更能提高并发, 但是提高并发并不意味着启动更多的线程来执行, 因为更多的线程意味着线程创建的开销更大、上下文切换更频繁, 程序反而不能支持更多的 TPS</p><p>多任务系统往往需要同时执行多道作业, 作业数往往大于机器 CPU 数, 然而一颗 CPU 同时只能执行一项任务, 如何让用户感觉这些任务正在同时运行呢? 操作系统的设计者巧妙地利用了 <strong>时间片轮转</strong> 的方式来解决这个问题</p><p>时间片: 时间片是 CPU 分配给各个任务(线程)的时间</p><blockquote><p>单核 CPU 为何支持多线程? 给每个进程分配时间片以及上下文切换来达到雨露均沾的效果, 从宏观上给用户感觉就是在多线程同时执行的错觉</p></blockquote><p>线程上下文是指某一时间点 CPU 寄存器和程序计数器的内容, CPU 通过时间片分配算法来循环执行线程任务, 因为时间片非常短, 所以 CPU 通过不停地切换线程执行, 所以多核 CPU 一定程度上可以减少上下文切换频率的</p><ul><li>主动让出 CPU, 比如调用了 sleep(), wait() 等</li><li>时间片用完, 因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死</li><li>调用了阻塞类型的系统中断, 比如请求 IO, 线程被阻塞</li></ul><p>上面三种情况都会发生线程切换, 线程切换意味着需要保存当前线程的上下文, 以便等到下次得到 CPU 的时候能恢复现场, 并加载下一个将要占用 CPU 的线程上下文, 这就是上下文切换</p><h2 id="java-中的线程" tabindex="-1"><a class="header-anchor" href="#java-中的线程"><span>Java 中的线程</span></a></h2><h3 id="如何创建线程" tabindex="-1"><a class="header-anchor" href="#如何创建线程"><span>如何创建线程</span></a></h3><p>创建线程的方式有很多种, 比如实现 <code>Runnable</code>、<code>Callable</code> 接口、继承 <code>Thread</code> 类、创建线程池、使用 <code>CompletableFuture</code> 类等等, 不过这些方式并没有真正创建出线程, 准确来说这些都是使用线程的方法, 而非创建</p><p>严格来说, <code>Java</code> 创建线程的方式只有一种, 就是通过 <code>new Thread().start()</code> 创建的, 因为不管基于那种方式, 最终还是依赖于 <code>new Thread().start()</code></p><blockquote><p>这里其实涉及到一个 <code>线程体</code> 的概念, 它指在线程里面运行的那一段代码逻辑, 也就是 <code>run()</code> 方法体里面的逻辑, 可以认为 <code>Runnable</code>、<code>Callable</code> 这些对象其实就是线程体</p></blockquote><h3 id="线程的生命周期和状态" tabindex="-1"><a class="header-anchor" href="#线程的生命周期和状态"><span>线程的生命周期和状态</span></a></h3><p><code>java.lang.Thread</code> 类中定义了一个枚举类 <code>State</code>, 里面定义了 Java 线程拥有的状态:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始状态, 线程被创建出来但没有立马被调用 \`start()\` 方法</span>
    <span class="token constant">NEW</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行状态, 线程调用了 \`start()\` 方法等待运行的状态</span>
    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>
    <span class="token comment">// 阻塞状态, 需要等待锁释放</span>
    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>
    <span class="token comment">// 等待状态, 表示该线程需要等待其他线程做出一些特定动作(通知或者中断)</span>
    <span class="token constant">WAITING</span><span class="token punctuation">,</span>
    <span class="token comment">// 超时等待状态, 可以在指定的时间后自行返回而不是像 WAITING 那样一直等待</span>
    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>
    <span class="token comment">// 终止状态, 表示该线程已经运行完毕</span>
    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thread-类中的方法" tabindex="-1"><a class="header-anchor" href="#thread-类中的方法"><span>Thread 类中的方法</span></a></h3><table><thead><tr><th>方法</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>start()</td><td>启动一个新线程; JVM 调用这个线程的 run 方法</td><td>调用 start() 方法让线程进入就绪状态, 里面的代码不一定立刻运行(CPU 的时间片还没分到该线程) <br> 该方法只能调用一次</td></tr><tr><td>run()</td><td>线程启动后调用该方法</td><td>如果构造线程时传递了 Runnable 参数, 那么线程启动后会执行 Runnable 中的 run 方法, 否则默认不执行如何操作, 但是可以通过创建 Thread 的子类来覆盖默认行为</td></tr><tr><td>setName(String)</td><td>给当前线程设定名字</td><td>默认是 &quot;Thread-n&quot;, 主线程是 &quot;main&quot;</td></tr><tr><td>getName()</td><td>获取当前线程的名字</td><td></td></tr><tr><td>currentThread()</td><td>获取当前线程对象, 代码在哪个线程中执行</td><td>静态方法 <br> 本地方法</td></tr><tr><td>sleep(long)</td><td>让当前线程休眠多少秒再继续执行</td><td>静态方法 <br> 本地方法 <br> <code>Thread.sleep(0)</code> 让操作系统立刻重新进行一次 CPU 竞争</td></tr><tr><td>yeild()</td><td>提示当前线程调度器尽量让出当前线程对 CPU 的占用</td><td>静态方法 <br> 本地方法 <br> 调用该方法并不能保证一定会让出 CPU 资源</td></tr><tr><td>setPriority(int)</td><td>设置当前线程优先级</td><td>Java 中的优先级是 1 ~ 10 的整数, 越大优先级越高, 常用的是1, 5, 10</td></tr><tr><td>getPriority()</td><td>获取当前线程优先级</td><td></td></tr><tr><td>interrupt()</td><td>中断当前线程</td><td>该方法只是给线程设置中断标记, 并不是停止线程</td></tr><tr><td>interrupted()</td><td>判断当前线程是否被中断, 并清除中断标记</td><td>静态方法</td></tr><tr><td>isInterrupted()</td><td>判断当前线程是否被中断, 不清除中断标记</td><td></td></tr><tr><td>join()</td><td>等待当前线程终止</td><td><code>join()</code> 实际上是调用 <code>join(0)</code></td></tr><tr><td>isAlive()</td><td>线程是否存活(还没有运行完成)</td><td>本地方法</td></tr><tr><td>setDaemon(boolean)</td><td>将此线程标记为守护线程或用户线程</td><td>true: 守护线程, false: 用户线程 <br> 通过 <code>Thread.isDaemon()</code> 来判断是否是守护线程</td></tr><tr><td>getId()</td><td>获取线程 id</td><td>id 唯一</td></tr><tr><td>getState()</td><td>获取线程状态</td><td></td></tr></tbody></table><h4 id="start-和-run-方法" tabindex="-1"><a class="header-anchor" href="#start-和-run-方法"><span>start 和 run 方法</span></a></h4><p>先 <code>new Thread()</code> 然后调用 <code>start()</code> 方法会启动一个线程并使线程进入就绪状态, 当分配到时间片后就可以开始运行了, 然后执行 <code>run()</code> 方法里面的逻辑, 这样才是多线程工作</p><p>如果直接调用 <code>run()</code> 只是相当于在主线程中调用普通方法, 并不会在新的线程中执行, 这样就不是多线程工作</p><h4 id="sleep-和-wait-的区别" tabindex="-1"><a class="header-anchor" href="#sleep-和-wait-的区别"><span>sleep 和 wait 的区别</span></a></h4><p>两者的相同点: 都可以暂停线程的执行</p><p>两者的不同点:</p><ul><li><code>sleep()</code> 方法没有释放锁; <code>wait()</code> 方法释放了锁</li><li><code>sleep()</code> 通常用于暂停执行, 执行方法会使线程会变成 <code>TIMED_WAITING</code> 状态; <code>wait()</code> 通常用于线程交互/通信, 需要配合 <code>synchronized</code> 使用, 执行方法会使线程会变成 <code>WAITING</code> 状态</li><li><code>sleep()</code> 方法执行完成后, 线程会自动苏醒; <code>wait()</code> 方法被调用后, 线程不会自动苏醒, 需要别的线程用同一个对象上的 <code>notify()</code> 或者 <code>notifyAll()</code> 方法, 不过可以使用 <code>wait(long)</code> 设置超时后自动苏醒</li><li><code>sleep()</code> 是 <code>Thread</code> 类的静态本地方法; <code>wait()</code> 是 <code>Object</code> 类的本地方法</li></ul><blockquote><p>为什么 wait() 方法不定义在 Thread 类中?</p><p><code>wait()</code> 的目的是要让获得对象锁的线程实现等待, 会自动释放当前线程占有的对象锁. 每个对象都有对象锁, 既然要释放当前线程占有的对象锁并让其进入 WAITING 状态, 自然是要操作对象(Object)而非当前线程(Thread)了<br><br></p><p>为什么 sleep() 方法不定义在 Object 类中?</p><p><code>sleep()</code> 是要暂停当前线程, 跟对象是没有关系</p></blockquote><h2 id="jmm-内存模型" tabindex="-1"><a class="header-anchor" href="#jmm-内存模型"><span>JMM 内存模型</span></a></h2>`,34),d={class:"hint-container tip"},r=n("p",{class:"hint-container-title"},"CPU的多核并发缓存架构",-1),u=a(`<p>JMM 全称为 Java Memory Model, Java 多线程内存模型跟 CPU 缓存模型类似, 是基于 CPU 缓存模型来建立的, Java 线程内存模型是标准化的, 屏蔽了底层不同计算机的区别</p><p>可以先看一个简单的 demo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;waiting data...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===== success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Tread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">prepareData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepareData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;prepare data...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;prepare data end...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码后, 会发现第 9 行的代码并没有输出且程序没有退出, 说明 19 行的代码虽然执行了但是并没有影响到第 6 行的判断; 当将变量 <code>flag</code> 用 <code>volatile</code> 修饰后再运行代码, 程序最终会停止且第 9 行代码也会被执行</p><h3 id="jmm-的原子操作" tabindex="-1"><a class="header-anchor" href="#jmm-的原子操作"><span>JMM 的原子操作</span></a></h3><ul><li><code>read</code>: 读取, 从主内存读取数据</li><li><code>load</code>: 载入, 将主内存读取到的数据写入工作内存</li><li><code>use</code>: 使用, 从工作内存读取数据来计算</li><li><code>assign</code>: 赋值, 将计算好的值重新赋值到工作内存中</li><li><code>store</code>: 存储, 将工作内存数据写入主内存</li><li><code>write</code>: 写入, 将 store 过去的变量赋值给主内存中的变量</li><li><code>lock</code>: 锁定, 将主内存变量加锁, 标识为线程独占状态</li><li><code>unlock</code>: 解锁, 将主内存变量解锁, 解锁后其他线程可以锁定该变量</li></ul><h3 id="jmm-缓存不一致问题" tabindex="-1"><a class="header-anchor" href="#jmm-缓存不一致问题"><span>JMM 缓存不一致问题</span></a></h3><p><code>缓存一致性协议(MESI)</code>: 多个 CPU 从主内存读取一个数据到各自的高速缓存, 当其中某个 CPU 修改了缓存里的数据, 该数据会<strong>马上同步回主内存</strong>, 其他 CPU 通过总线嗅探机制可以感知到数据的变化而将自己缓存里的数据失效</p><p>缓存加锁: 缓存锁的核心机制是基于缓存一致性协议来实现的, 一个处理器的缓存回写到内存会导致其他处理器的缓存无效, IA-32 和 Intel 64 处理器使用 MESI 实现缓存一致性协议</p><h3 id="volatile-缓存可见性实现原理" tabindex="-1"><a class="header-anchor" href="#volatile-缓存可见性实现原理"><span>volatile 缓存可见性实现原理</span></a></h3><p>底层实现主要通过汇编 lock 前缀指令, 它会锁定这块内存区域的缓存(缓存行锁定)并写回到主内存</p><p>IA-32 和 Intel 64 架构软件开发手册对 lock 指令的解释:</p><ul><li>会将当前处理缓存行的数据<mark>立即</mark>写回到系统内存</li><li>这个协会内存的操作会引起在其他 CPU 里缓存了该内存地址的数据无效(MESI 协议)</li><li>提供内存屏障功能, 使 lock 前后指令不能重排序</li></ul><h3 id="指令重排序与内存屏障" tabindex="-1"><a class="header-anchor" href="#指令重排序与内存屏障"><span>指令重排序与内存屏障</span></a></h3><h4 id="指令重排序" tabindex="-1"><a class="header-anchor" href="#指令重排序"><span>指令重排序</span></a></h4><p>并发编程的三大特性:</p><ul><li><strong>原子性</strong>: 一个或多个操作要么全部执行成功, 要么全部执行失败</li><li><strong>可见性</strong>: 当一个线程对共享变量进行修改后, 其他线程可以立刻看到</li><li><strong>有序性</strong>: 程序的执行顺序会按照代码的先后顺序执行</li></ul><p>volatile 保证可见性与有序性, 但是不保证原子性, 保证原子性需要借助 synchronized 这样的锁机制</p><p>指令重排序: 在不影响单线程程序执行结果的前提下, 计算机为了最大限度的发挥机器性能, 会对机器指令重排序优化</p><p>源代码-&gt;编译器优化重排序-&gt;指令级并行重排序-&gt;内存系统重排序-&gt;最终执行的指令序列</p><p>重排序会遵循 <code>as-if-serial</code> 与 <code>happens-before</code> 原则</p><h4 id="内存屏障" tabindex="-1"><a class="header-anchor" href="#内存屏障"><span>内存屏障</span></a></h4><p>Java 规范定义的内存屏障:</p><table><thead><tr><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad</td><td>Load1;LoadLoad;Load2</td><td>保证 Load1 的读取操作在 Load2 及后续读取操作之前执行</td></tr><tr><td>StoreStore</td><td>Store1;StoreStore;Store2</td><td>在 Store2 及其后的写操作执行前, 保证 Store1 的写操作已经刷新到主内存</td></tr><tr><td>LoadStore</td><td>Load1;LoadStore;Store2</td><td>在 Store2 及其后的写操作执行前, 保证 Load1 的读取操作已经结束</td></tr><tr><td>StoreLoad</td><td>Store1;StoreLoad;Load2</td><td>保证 Store1 的写操作已经刷新到主内存之后, Load2 及其后的读操作才能执行</td></tr></tbody></table><p>Java 规定 volatile 需要实现的内存屏障:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// StoreStore 屏障</span>
a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// volatile 写, a 为 volatile 变量</span>
<span class="token comment">// StoreLoad 屏障</span>
b <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// volatile 读</span>
<span class="token comment">// LoadLoad 屏障</span>
<span class="token comment">// LoadStore 屏障</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不同 CPU 硬件对于 JVM 的内存屏障规范实现指令不一样</li><li>Intel CPU 硬件级内存屏障指令 <ul><li>lfence: 是一种 Load Barrier 读屏障, 实现 LoadLoad 屏障</li><li>sfence: 是一种 Store Barrier 写屏障, 实现 StoreStore 屏障</li><li>mfence: 是一种全能型的屏障, 具备 lfence 和 sfence 的能力, 具有所有屏障能力</li></ul></li><li>JVM 底层简化了内存屏障硬件指令的实现 <ul><li>lock 前缀: lock 指令不是一种内存屏障, 但是它能完成类似内存屏障的功能</li></ul></li></ul><h2 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span>锁机制</span></a></h2><h3 id="锁的分类" tabindex="-1"><a class="header-anchor" href="#锁的分类"><span>锁的分类</span></a></h3><h4 id="悲观锁与乐观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁与乐观锁"><span>悲观锁与乐观锁</span></a></h4><p>锁的一种宏观分类方式是悲观锁和乐观锁. 悲观锁与乐观锁并不是特指某个锁（Java 中没有哪个 Lock 实现类就叫PessimisticLock 或 OptimisticLock）, 只是在并发情况下的两种不同策略</p><p>悲观锁（Pessimistic Lock）, 就是很悲观, 每次去拿数据的时候都认为别人会修改. 所以每次在拿数据的时候都会上锁, 这样别人想拿数据就被挡住, 直到悲观锁被释放</p><p>乐观锁（Optimistic Lock）, 就是很乐观, 每次去拿数据的时候都认为别人不会修改. 所以不会上锁, 不会上锁！但是如果想要更新数据, 会在更新前检查在读取至更新这段时间别人有没有修改过这个数据. 如果修改过就重新读取, 再次尝试更新, 循环上述步骤直到更新成功（当然也允许更新失败的线程放弃操作）</p><blockquote><p>悲观锁阻塞事务, 乐观锁回滚重试. 它们各有优缺点, 不能认为一种一定好于另一种. 像乐观锁适用于写比较少的情况下, 即冲突真的很少发生的时候, 这样可以省去锁的开销, 加大了系统的整个吞吐量. 如果经常产生冲突, 上层应用会不断的进行重试, 这样反倒是降低了性能, 这种情况下用悲观锁就比较合适</p></blockquote><h4 id="自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁"><span>自旋锁</span></a></h4><p>当一个线程尝试去获取某一把锁的时候, 如果这个锁此时已经被别人获取(占用), 那么此线程就无法获取到这把锁, 该线程将会等待, 间隔一段时间后会再次尝试获取. 这种采用<code>循环加锁 -&gt; 等待的机制</code>被称为<code>自旋锁(spinlock)</code></p><blockquote><p>刚刚的乐观锁就有类似的无限循环操作, 那它是自旋锁吗？</p><p>不是. 尽管自旋与 while(true) 的操作是一样的, 但还是应该将这两个术语分开. &quot;自旋&quot;这两个字, 特指自旋锁的自旋</p></blockquote><h4 id="可重入锁-递归锁" tabindex="-1"><a class="header-anchor" href="#可重入锁-递归锁"><span>可重入锁(递归锁)</span></a></h4><p>可重入锁的字面意思是“可以重新进入的锁”, 即<strong>允许同一个线程多次获取同一把锁</strong>. 比如一个递归函数里有加锁操作, 递归过程中这个锁会阻塞自己吗？如果不会, 那这个锁就是可重入锁（因为这个原因可重入锁也叫做递归锁）</p><p>Java 里只要以 <code>Reentrant</code> 开头命名的锁都是可重入锁, 而且 JDK 提供的所有现成的 Lock 实现类, 包括 <code>synchronized</code> 关键字锁都是可重入的</p><h4 id="公平锁和非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁和非公平锁"><span>公平锁和非公平锁</span></a></h4><p>如果多个线程申请一把公平锁, 当锁释放的时候, 先申请的先得到, 非常公平. 如果是非公平锁, 后申请的线程可能先获取到锁, 是随机或者按照其他优先级排序的</p><p>对 <code>ReentrantLock</code> 类而言, 通过构造函数传参可以指定该锁是否是公平锁, 默认是非公平锁. 一般情况下, 非公平锁的吞吐量比公平锁大, 如果没有特殊要求, 优先使用非公平锁</p><p>对于 <code>synchronized</code> 而言, 它也是一种非公平锁, 但是并没有任何办法使其变成公平锁</p><h3 id="synchronized-锁" tabindex="-1"><a class="header-anchor" href="#synchronized-锁"><span>synchronized 锁</span></a></h3><p>在多线程的环境下, 多个线程同时访问共享资源会出现一些问题, 而 <code>synchronized</code> 关键字就是用来保证线程同步的</p><blockquote><p><code>synchronized</code> 可以保证原子性、可见性、有序性, 而 <code>volatile</code> 只能保证可见性和有序性</p></blockquote><p><code>synchronized</code> 主要有三种使用方式: 修饰普通同步方法、修饰静态同步方法、修饰同步代码块</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 修饰普通同步方法</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 修饰同步代码块</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 修饰静态同步方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="synchronized-的实现原理" tabindex="-1"><a class="header-anchor" href="#synchronized-的实现原理"><span>synchronized 的实现原理</span></a></h4><p>通过对象锁(Monitor)机制, 如果是同步代码块, 在进入 synchronized 同步块时, 需要通过 <code>monitorenter</code> 指令获取到当前对象的 monitor (也就是对象锁), 执行完同步块的逻辑后, 通过 <code>monitorexit</code> 指令来释放所持有的 monitor; 如果是同步方法, 那么方法的 flag 上会被加上 synchronized 标记, 因为整个方法都是同步的, 处理逻辑跟代码块是一样的</p><div class="hint-container tip"><p class="hint-container-title">如何查看字节码指令?</p><p>可以使用 <code>javap -v</code> 来查看下面代码的字节码指令</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><blockquote><p><code>monitorenter</code> 和 <code>monitorexit</code> 操作的对象都是 <code>monitor</code>(对象监视器), 在 Java 虚拟机中, Monitor 是基于 C++ 实现的, 由 ObjectMonitor 实现的. 每个对象中都内置了一个 ObjectMonitor 对象<br><code>wait/notify</code> 等方法也都依赖 <code>monitor</code> 对象, 这就是为什么只有在同步块或者方法中才能调用 <code>wait/notify</code> 等方法, 否则会抛出 <code>IllegalMonitorStateException</code> 异常的原因</p></blockquote><h4 id="synchronized-的锁升级" tabindex="-1"><a class="header-anchor" href="#synchronized-的锁升级"><span>synchronized 的锁升级</span></a></h4><p>在 Java 6 之后, synchronized 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销, 这些优化让 synchronized 锁的效率提升了很多</p><p>升级过程: <code>无锁状态 -&gt; 偏向锁状态 -&gt; 轻量级锁状态 -&gt; 重量级锁状态</code>, 它们会随着竞争的激烈而逐渐升级, 升级是单向的, 也就是只能升级不能降级, 这样做是为了提高获得锁和释放锁的效率</p><h3 id="cas-锁机制" tabindex="-1"><a class="header-anchor" href="#cas-锁机制"><span>CAS 锁机制</span></a></h3><p>CAS 即 Compare And Swap, 翻译成中文就是&quot;比较并替换&quot;, Java 中可以通过 CAS 操作来保证原子性</p><p>CAS 主要包含三个参数(V, expect, update), V 表示要更新的变量(内存值)、expect 表示预期值(旧值)、update 表示新值</p><p>CAS 的原理:</p><ul><li>先比较 V 和 expect 的值, 如果相等则将 update 的值赋值给 V</li><li>如果不相等说明其他线程对该变量做了更新, 放弃本次操作, 然后循环上面的操作直到更新成功</li></ul><p>一段用 <code>AtomicInteger</code> 实现的 CAS 锁:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> oldvalue <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newvalue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>AtomicInteger 中的 CAS 的底层是通过汇编语言的 <code>lock cmpxchgq</code> 指令来实现原子性操作的</p></blockquote><h4 id="cas-和-syncronized-的比较" tabindex="-1"><a class="header-anchor" href="#cas-和-syncronized-的比较"><span>CAS 和 syncronized 的比较</span></a></h4><ul><li>syncronized 会阻塞线程, 会进行线程的上下文切换, 会由用户态切换到内核态, 切换前需要保存用户态的上下文, 而内核态恢复到用户态, 又需要恢复保存的上下文, 非常消耗资源</li><li>CAS 能很大程度提高并发程序的执行效率, 因为线程没有被阻塞, 也就没有其他开销(上下文切换、用户态切换到内核态)</li></ul><h4 id="cas-存在的问题" tabindex="-1"><a class="header-anchor" href="#cas-存在的问题"><span>CAS 存在的问题</span></a></h4><ul><li>ABA问题</li><li>循环时间过长导致开销太大: CAS 自旋时间过长会给 CPU 带来非常大的开销</li><li>只能保证一个共享变量的原子操作: 对多个共享变量进行操作时, CAS 无法保证操作的原子性, 这个时候就需要用锁了</li></ul><div class="hint-container tip"><p class="hint-container-title">ABA 问题</p><ul><li><p>什么是ABA问题呢?</p><p>假设有两个线程A、B,同时对一个共享变量 M 进行操作, 线程 A 将 M 的值从 1 改为 2, 线程 B 将 M 的值从 1 改为 3, 然后又改为 1, 两个线程同时获取到 M 的值, 但是线程 B 执行的更快, 在线程 A 将 1 改为 2 之前执行完成了, 此时线程 A 判断原本的值和内存的值一致, 执行修改. 这就是 ABA 问题</p></li><li><p>如何解决 ABA 问题呢?</p><p>很简单, 对共享变量添加 version 标记就可以了. 在原本的 ABA 问题中:</p><ul><li>线程 A 获取到 M 的值为(1, 1), 线程 B 获取到 M 的值为 (1, 1)</li><li>线程 B 将 M 的值做修改: (1, 1) -&gt; (3, 2) -&gt; (1, 3)</li><li>线程 A 判断值是否相等: (1, 1) != (1, 3), 放弃本次操作</li></ul></li></ul></div><h4 id="原子类" tabindex="-1"><a class="header-anchor" href="#原子类"><span>原子类</span></a></h4><p>原子操作类是 CAS 在 Java 中的应用, 从 JDK 1.5 开始提供了 <code>java.util.concurrent.atomic</code> 包, 这个包中的原子操作提供了一种用法简单、性能高效、线程安全地更新变量的方式</p><p>Atomic 包里的类基本都是使用 <code>Unsafe</code> 实现的包装类</p><p>JUC包中的4种原子类</p><ul><li>基本类型: 使用原子的方式更新基本类型 <ul><li><code>AtomicInteger</code>: 整形原子类</li><li><code>AtomicLong</code>: 长整型原子类</li><li><code>AtomicBoolean</code>: 布尔型原子类</li></ul></li><li>数组类型: 使用原子的方式更新数组里的某个元素 <ul><li><code>AtomicIntegerArray</code>: 整形数组原子类</li><li><code>AtomicLongArray</code>: 长整形数组原子类</li><li><code>AtomicReferenceArray</code>: 引用类型数组原子类</li></ul></li><li>引用类型: <ul><li><code>AtomicReference</code>: 引用类型原子类, 存在ABA问题</li><li><code>AtomicStampedReference</code>: 原子更新带有版本号的引用类型. 该类将整数值与引用关联起来, 可以于原子的更新数据和数据的版本号, 可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题</li><li><code>AtomicMarkableReference</code>: 原子更新带有标记位的引用类型</li></ul></li><li>原子更新字段类 <ul><li><code>AtomicIntegerFieldUpdater</code>: 原子更新整型的字段的更新器</li><li><code>AtomicLongFieldUpdater</code>: 原子更新长整型字段的更新器</li><li><code>AtomicReferenceFieldUpdater</code>: 引用类型更新器原子类</li></ul></li></ul><h2 id="aqs" tabindex="-1"><a class="header-anchor" href="#aqs"><span>AQS</span></a></h2><h3 id="aqs-是什么" tabindex="-1"><a class="header-anchor" href="#aqs-是什么"><span>AQS 是什么</span></a></h3><p>AQS 就是抽象类 <code>AbstractQueuedSynchronizer</code> 的缩写, 翻译的意思是&quot;抽象队列同步器&quot;, 它是 JUC 下的面的一个基类, JUC 中的很多类都是基于 AQS 实现了的一些功能, 比如 <code>ReentrantLock</code>、<code>ThreadPoolExecuter</code>、阻塞队列、<code>CountDownLatch</code>、<code>Semaphore</code>、<code>CycleBarrier</code> 等等</p><p>AQS 使用成员变量 <strong>state</strong> 表示同步状态, 通过内置的 <strong>线程等待队列</strong> 来完成获取资源线程的排队工作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractQueuedSynchronizer</span>
    <span class="token keyword">extends</span> <span class="token class-name">AbstractOwnableSynchronizer</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AQS 核心思想是, 如果被请求的共享资源空闲, 则将当前请求资源的线程设置为有效的工作线程, 并且将共享资源设置为锁定状态。如果被请求的共享资源被占用, 那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制, 这个机制 AQS 是用 CLH 队列锁 实现的, 即将暂时获取不到锁的线程加入到队列中</p><blockquote><p>CLH(Craig, Landin, and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例, 仅存在结点之间的关联关系）, 它是一个 FIFO 队列</p></blockquote><p>AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配. 在 CLH 同步队列中, 一个节点表示一个线程, 它保存着线程的引用（thread）、当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** 指示节点在共享模式下等待的标记 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> <span class="token constant">SHARED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 指示节点在独占模式下等待的标记 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> <span class="token constant">EXCLUSIVE</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 表示线程已取消 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span> <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 表示线程已经准备好了, 只等资源释放 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIGNAL</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 表示节点在等待队列中, 节点线程等待唤醒 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONDITION</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 当前线程处在共享模式下, 该字段才会使用 */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PROPAGATE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token comment">// 结点状态, 取值范围是 [CANCELLED, SIGNAL, CONDITION, PROPAGATE]</span>
    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>
    <span class="token comment">// 前一个节点(线程)</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>
    <span class="token comment">// 后一个节点(线程)</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token comment">// 线程引用</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>

    <span class="token class-name">Node</span> nextWaiter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionObject</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** First node of condition queue. */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Node</span> firstWaiter<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** Last node of condition queue. */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Node</span> lastWaiter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aqs-的两种功能" tabindex="-1"><a class="header-anchor" href="#aqs-的两种功能"><span>AQS 的两种功能</span></a></h3><p>从使用层面来说, AQS 功能分为两种: <code>独占</code> 和 <code>共享</code></p><ul><li>独占锁: 每次只能一个线程持有锁, 比如 <code>ReentrantLock</code> 就是独占锁</li><li>共享锁: 允许多个线程持有锁, 并发访问共享资源, 比如 <code>ReentrantReadWriteLock</code></li></ul><p>共享锁和独占锁的释放有一定区别, 前面部分是一致的, 先判断头结点是不是 signal 状态, 如果是则唤醒头节点的下一个节点, 并将该节点设置为头结点, 而共享锁不一样, 某个节点被设置为 head 之后, 如果它的后继节点是 shared 状态, 那么会尝试使用 doReleaseShared 方法尝试唤醒节点, 实现共享状态的传播</p><h3 id="aqs-的相关方法" tabindex="-1"><a class="header-anchor" href="#aqs-的相关方法"><span>AQS 的相关方法</span></a></h3><h4 id="子类实现的方法-aqs-不做处理-模版方法" tabindex="-1"><a class="header-anchor" href="#子类实现的方法-aqs-不做处理-模版方法"><span>子类实现的方法, AQS 不做处理(模版方法)</span></a></h4><ul><li><code>tryAcquire(int arg)</code>: 独占获取同步状态, 获取同步状态成功后, 其他线程需要等待该线程释放同步状态才能获取同步状态</li><li><code>tryRelease(int arg)</code>: 独占式释放同步状态</li><li><code>tryAcquireShared(int arg)</code>: 共享式获取同步状态, 返回值大于等于0则表示获取成功, 否则获取失败</li><li><code>tryReleaseShared(int arg)</code>: 共享式释放同步状态</li><li><code>isHeldExclusively()</code>: 当前同步器是否在独占模式下被线程占用, 一般该方法表示同步器是否被当前线程独占</li></ul><h4 id="通用实现的方法-aqs-本身实现的方法" tabindex="-1"><a class="header-anchor" href="#通用实现的方法-aqs-本身实现的方法"><span>通用实现的方法, AQS 本身实现的方法</span></a></h4><ul><li><code>aquire(int arg)</code>: 独占式的获取锁的操作, 独占式获取同步状态都调用者方法, 通过子类的 tryAquire 方法判断是否获取到锁</li><li><code>acquireShared(int arg)</code>: 共享式的获取锁的操作, 在读写锁中用到, 通过 tryAquireShared 方法判断是否获取同步状态</li><li><code>release(int args)</code>: 独占式的释放同步状态, 通过 tryRelease 方法判断是否释放了独占式同步状态</li><li><code>releaseShared(int arg)</code>: 共享式的释放同步状态, 通过 tryReleaseShared 方法判断是否已经释放了共享同步状态</li></ul>`,92);function k(v,m){const s=t("Mermaid");return o(),l("div",null,[i,n("div",d,[r,c(s,{id:"mermaid-418",code:"eJxLyslPztZNSi1J5FJQSM7PKc3NK1YwArLBElaOVoZANkIGwkuMVnIOCFWKBXOSwJyn61uerp3xdOYKsGhqXgrcCCesRiQjG5GC04jigsTkVCQ6Fazy+Z7JQJVKsWCT0zCF0HVBHOJsBfKXgsKTHbuftrUCVQc5+sItclTQ1bVTAFsBZjnCWc5AljNc1gnMSgPZC2Y5wVkIdWlcABbHY7w="})]),u])}const y=e(p,[["render",k],["__file","Concurrent.html.vue"]]),g=JSON.parse('{"path":"/docs/note/back-end/java/Concurrent.html","title":"Java 并发","lang":"zh-CN","frontmatter":{"title":"Java 并发","date":"2024-03-12T00:00:00.000Z","order":4,"description":"基本概念 进程、线程、纤程(协程/虚拟线程) 进程: 在操作系统中, 进程是基本的资源分配单位, 操作系统通过进程来管理计算机的资源, 如 CPU、内存、磁盘等 每个进程在操作系统中都有一个唯一的进程标识符: PID, 用于区分不同的进程 线程: 线程是操作系统中的基本执行单元, 它是进程中的一个实体, 是 CPU 调度和分派的基本单位 一个进程可以包...","head":[["meta",{"property":"og:url","content":"https://blog.white233.top/docs/note/back-end/java/Concurrent.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"Java 并发"}],["meta",{"property":"og:description","content":"基本概念 进程、线程、纤程(协程/虚拟线程) 进程: 在操作系统中, 进程是基本的资源分配单位, 操作系统通过进程来管理计算机的资源, 如 CPU、内存、磁盘等 每个进程在操作系统中都有一个唯一的进程标识符: PID, 用于区分不同的进程 线程: 线程是操作系统中的基本执行单元, 它是进程中的一个实体, 是 CPU 调度和分派的基本单位 一个进程可以包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T08:00:56.000Z"}],["meta",{"property":"article:author","content":"White"}],["meta",{"property":"article:published_time","content":"2024-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T08:00:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T08:00:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"White\\",\\"url\\":\\"https://blog.white233.top\\",\\"email\\":\\"white996@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"进程、线程、纤程(协程/虚拟线程)","slug":"进程、线程、纤程-协程-虚拟线程","link":"#进程、线程、纤程-协程-虚拟线程","children":[]},{"level":3,"title":"并发、并行、串行","slug":"并发、并行、串行","link":"#并发、并行、串行","children":[]},{"level":3,"title":"上下文切换","slug":"上下文切换","link":"#上下文切换","children":[]}]},{"level":2,"title":"Java 中的线程","slug":"java-中的线程","link":"#java-中的线程","children":[{"level":3,"title":"如何创建线程","slug":"如何创建线程","link":"#如何创建线程","children":[]},{"level":3,"title":"线程的生命周期和状态","slug":"线程的生命周期和状态","link":"#线程的生命周期和状态","children":[]},{"level":3,"title":"Thread 类中的方法","slug":"thread-类中的方法","link":"#thread-类中的方法","children":[]}]},{"level":2,"title":"JMM 内存模型","slug":"jmm-内存模型","link":"#jmm-内存模型","children":[{"level":3,"title":"JMM 的原子操作","slug":"jmm-的原子操作","link":"#jmm-的原子操作","children":[]},{"level":3,"title":"JMM 缓存不一致问题","slug":"jmm-缓存不一致问题","link":"#jmm-缓存不一致问题","children":[]},{"level":3,"title":"volatile 缓存可见性实现原理","slug":"volatile-缓存可见性实现原理","link":"#volatile-缓存可见性实现原理","children":[]},{"level":3,"title":"指令重排序与内存屏障","slug":"指令重排序与内存屏障","link":"#指令重排序与内存屏障","children":[]}]},{"level":2,"title":"锁机制","slug":"锁机制","link":"#锁机制","children":[{"level":3,"title":"锁的分类","slug":"锁的分类","link":"#锁的分类","children":[]},{"level":3,"title":"synchronized 锁","slug":"synchronized-锁","link":"#synchronized-锁","children":[]},{"level":3,"title":"CAS 锁机制","slug":"cas-锁机制","link":"#cas-锁机制","children":[]}]},{"level":2,"title":"AQS","slug":"aqs","link":"#aqs","children":[{"level":3,"title":"AQS 是什么","slug":"aqs-是什么","link":"#aqs-是什么","children":[]},{"level":3,"title":"AQS 的两种功能","slug":"aqs-的两种功能","link":"#aqs-的两种功能","children":[]},{"level":3,"title":"AQS 的相关方法","slug":"aqs-的相关方法","link":"#aqs-的相关方法","children":[]}]}],"git":{"createdTime":1710772288000,"updatedTime":1711094456000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":2}]},"readingTime":{"minutes":23.9,"words":7171},"filePathRelative":"docs/note/back-end/java/Concurrent.md","localizedDate":"2024年3月12日","excerpt":"<h2>基本概念</h2>\\n<h3>进程、线程、纤程(协程/虚拟线程)</h3>\\n<ul>\\n<li>进程:\\n<ul>\\n<li>在操作系统中, 进程是基本的资源分配单位, 操作系统通过进程来管理计算机的资源, 如 CPU、内存、磁盘等</li>\\n<li>每个进程在操作系统中都有一个唯一的进程标识符: PID, 用于区分不同的进程</li>\\n</ul>\\n</li>\\n<li>线程:\\n<ul>\\n<li>线程是操作系统中的基本执行单元, 它是进程中的一个实体, 是 CPU 调度和分派的基本单位</li>\\n<li>一个进程可以包含多个线程, 每个线程都可以独立执行不同的任务, 但它们共享进程的资源</li>\\n</ul>\\n</li>\\n<li>纤程:\\n<ul>\\n<li>纤程可以在一个线程内创建多个纤程, 这些纤程之间共享同一个线程的资源</li>\\n<li>纤程是在同一个进程内部运行的, 不需要操作系统的介入, 可以在用户空间内实现写作式多任务助理. 因此纤程的创建和开销很小, 可以高效的利用系统资源</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{y as comp,g as data};
