import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as l,d as a,e as s,h as i,o as k,r as e}from"./app-De7shokQ.js";const p={},d=a(`<h2 id="集合是什么" tabindex="-1"><a class="header-anchor" href="#集合是什么"><span>集合是什么</span></a></h2><blockquote><p>计算机科学中, 集合的定义是一组可变数量的数据项（也可能为 0 个）的组合, 这些数据项可能共享某些特征, 需要以某种操作方式一起进行操作</p></blockquote><p>Java 集合框架是一个用来代表和操纵集合的统一架构, 它提供了一套性能优良, 使用方便的接口和类, Java 集合框架位于 <code>java.util</code> 包中</p><p>Java 集合也可以称为容器, 主要由两大接口派生而来: <code>java.util.Collection</code> 以及 <code>java.util.Map</code>, 其中 Collection 主要存放单个的数据对象, 而 Map 主要存放 key-value 的键值对对象</p><p>集合应用场景:</p><ul><li>无法预测存储数据的数量: 由于数组容量是确定的, 因此集合存储不定量的数据更合适</li><li>存储具有关系的数据: 比如&lt;打工人-工资&gt;的关系, 就可以使用 Map 来处理</li><li>数据去重: 使用数组来实现去重的效率低, 而 Set 集合本身就具有元素不可重复的性质</li><li>数据的操作: 数组不能方便的处理元素增删、移动等操作</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果没有特殊说明, 给出的代码均来自 JDK 1.8 版本</p></div><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection"><span>Collection</span></a></h2><p><code>java.util.Collection</code> 定义了一些集合的基本操作:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> Iterable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 添加一个类型为E的元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> add</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 添加一个类型为E的元素集合</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> addAll</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> extends</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">c</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 清空集合</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> clear</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断集合是否包含给定的元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> contains</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> o</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断集合是否包含给定集合里的所有元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> containsAll</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">c</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断集合是否为空</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isEmpty</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 从集合移除给定的元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> o</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 从集合移除给定集合的所有元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> removeAll</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">c</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 集合的元素数量</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> size</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 转换为数组对象</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">toArray</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 转换为指定类型的数组对象</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">toArray</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 重写父类方法</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Spliterators</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 创建一个流</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Stream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">stream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> StreamSupport</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">stream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">false</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 创建一个并行流</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Stream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">parallelStream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> StreamSupport</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">stream</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码可以看到 <code>java.util.Collection</code> 继承自 <code>java.util.Iterable</code>, 它提供了标准的迭代器模型, 定义了如下方法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Iterable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 返回一个对象类型为E的迭代器</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Iterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">iterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 为每个元素都执行给定的操作</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> forEach</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Consumer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> super</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">action</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">requireNonNull</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(action);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            action</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">accept</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(e);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 返回用于遍历和划分源元素的对象（可用于创建 Stream 对象）</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Spliterators</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">spliteratorUnknowSize</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">iterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Java 迭代器</p><p>Java 迭代器是 Java 集合框架中的一种机制, 是一种用于遍历集合的接口, 它提供了一种统一的方式来访问集合中的元素, 而不需要了解底层集合的具体实现细节</p><p>Java Iterator 比较常用的方法有如下几个:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">publi </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Iterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断是否有后续元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hasNext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 获取后续元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    E</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 删除迭代器返回的最后一个元素</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> UnsupportedOperationException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;remove&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 迭代器不是集合, 而是一种访问集合的方法, 并且是单向遍历的机制, 只能从前往后遍历集合中的元素, 不能往回遍历</p><p>在使用迭代器遍历集合时, 不能直接修改集合中的元素, 而是需要使用迭代器的 <code>remove()</code> 方法来删除当前元素</p></div><p>在 Collection 的基础上又定义了 3 种接口类, 分别是:</p><ul><li>List: 序列, 按照一定的顺序保存元素且可以重复</li><li>Set: 集, 元素不能重复</li><li>Queue: 队列, 按照排队规则来确定元素的顺序, 可以重复</li></ul><p>它们以不同的方式操作集合对象, 而在它们的基础上还有不同的实现类: ArrayList、LinkedList、HashSet、TreeSet 等</p><p>以下是 Collection 的类图关系:</p>`,17),r=a(`<h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><p>List 接口是一个有序的集合, 它允许使用者像数组一样添加和删除元素</p><p>List 在 Collection 的基础上拓展了一些方法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> List</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 添加元素到指定索引位置</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> add</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 添加整个集合的元素到指定索引位置</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> addAll</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Collection</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> extends</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">c</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 获取指定索引位置的元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    E</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 获取元素的索引</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> indexOf</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> o</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 获取元素的最后一个索引位置（倒数的第一个索引）</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> lastIndexOf</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> o</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 返回类型为E的元素迭代器</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    ListIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">listIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 返回类型为E的包含指定索引位置之后元素的的迭代器</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    ListIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">listIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 移除指定索引位置的元素</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    E</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 将集合的所有元素都替换成给定操作执行的结果</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> replaceAll</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">UnaryOperator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">operator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 将元素放至指定索引处</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    E</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> set</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 对集合的元素进行排序</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> sort</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Comparator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> super</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">c</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">toArray</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        Arrays</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">sort</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(a, (Comparator) c);</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ListIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">li</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">listIterator</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> a) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            i</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            i</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">set</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">((E) e);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 截取从 from 到 to 的子列表</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    List</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">subList</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> from</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list-的实现类" tabindex="-1"><a class="header-anchor" href="#list-的实现类"><span>List 的实现类</span></a></h4><h5 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h5><p>ArrayList 的底层是数组队列, 相当于动态数组（与数组相比, 它的长度能动态增长）. 在添加大量元素前, 其底层实现使用 <code>ensureCapacity</code> 操作来增加 ArrayList 对象的容量, 这样可以减少递增式再分配的数量</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 部分源码</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> AbstractList</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">        implements</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> List</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;, </span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">RandomAccess</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">Cloneable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, java.io.</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">Serializable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 默认初始容量大小</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> DEFAULT_CAPACITY</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 空数组（用于空实例）</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">EMPTY_ELEMENTDATA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 用于默认大小空实例的共享空数组实例</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 我们把它从EMPTY_ELEMENTDATA数组中区分出来, 以知道在添加第一个元素时容量需要增加多少</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 保存ArrayList数据的数组</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    transient</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">elementData</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 非私有, 以简化嵌套类访问</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * ArrayList 所包含的元素个数</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> size</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ArrayList 的族谱:</p><ul><li><code>List</code>: 说明它是一个列表, 支持添加、删除、查找等操作, 并且支持通过下标访问</li><li><code>RandomAccess</code>: 这是一个标记接口, 说明实现这个接口的子类是支持 <strong>快速随机访问</strong> 的</li><li><code>Cloneable</code>: 说明它支持拷贝操作</li><li><code>Serializable</code>: 说明它可以进行序列化操作</li></ul><p>ArrayList 有三种方式来初始化:</p><ul><li>无参构造函数: 创建一个默认容量为0的空列表</li><li>带初始容量参数的构造函数: 创建一个指定容量的列表</li><li>使用集合创建的构造函数: 使用给定的集合创建一个列表</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>ArrayList 的底层是 Object[], 也就是说它是可以存储任意对象的, 包括 null 值. 但实际开发中一般避免这种情况以免代码发生 NPE</li><li>使用无参构造函数创建 ArrayList 时, 实际上是一个空数组, 在第一次调用 <code>add(E)</code> 方法时才会真正的分配容量, 分配后的容量为 10</li><li>ArrayList 是线程不安全的, 所以它适用于频繁的查找工作. 而 Vector 是古早的实现类, 底层同样适用 Object[], 但是线程安全</li></ol></div><p>ArrayList 的扩容机制</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 要分配的最大数组大小</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> MAX_ARRAY_SIZE</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Integer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">MAX_VALUE</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 8</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 根据给定的最小容量和当前数组元素来计算所需容量</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> calculateCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] elementData, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果当前数组元素为空数组（初始情况）, 返回默认容量和最小容量中的较大值作为所需容量</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (elementData </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(DEFAULT_CAPACITY, minCapacity);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 否则直接返回最小容量</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 确保内部容量达到指定的最小容量</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ensureCapacityInternal</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    ensureExplicitCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">calculateCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(elementData, minCapacity));</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 判断是否需要扩容</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ensureExplicitCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    modCount</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断当前数组容量是否足以存储minCapacity个元素</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (minCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> elementData</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 调用grow方法进行扩容</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        grow</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(minCapacity);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 扩容的核心方法</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> grow</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // oldCapacity 为旧容量, newCapacity 为新容量</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> oldCapacity</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> elementData</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 将 oldCapacity 右移一位, 其效果相当于 oldCapacity / 2,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 我们知道位运算的速度远远快于整除运算, 整句运算式的结果就是将新容量更新为旧容量的1.5倍</span></span>
<span class="line highlighted"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> newCapacity</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 然后检查新容量是否大于最小需要容量, 若还是小于最小需要容量, 那么就把最小需要容量当作数组的新容量</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (newCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果新容量大于 MAX_ARRAY_SIZE, 执行 \`hugeCapacity()\` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果 minCapacity 大于最大容量, 则新容量则为 \`Integer.MAX_VALUE\`, 否则, 新容量大小则为 MAX_ARRAY_SIZE 即为 \`Integer.MAX_VALUE - 8\`</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (newCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAX_ARRAY_SIZE </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hugeCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(minCapacity);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // minCapacity is usually close to size, so this is a win:</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    elementData </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Arrays</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">copyOf</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(elementData, newCapacity);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 添加元素的方法</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> add</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    ensureCapacityInternal</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(size </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);  </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// Increments modCount!!</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    //这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    elementData[size</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设现在通过无参构造函数创建一个列表, 它初始的 <code>elementData.length</code> 为 0</p><ul><li>向列表中添加一个元素, 因为第一次调用 <code>calculateCapacity()</code>, 此时函数返回默认容量大小 10, 在函数 <code>ensureExplicitCapacity()</code> 中, <code>minCapacity - elementData.length &gt; 0</code> 成立, 所以会调用 <code>grow()</code> 方法, 函数调用链: <code>add(E)</code> -&gt; <code>ensureCapacityInternal()</code> -&gt; <code>calculateCapacity()</code> -&gt; <code>ensureExplicitCapacity()</code> -&gt; <code>grow()</code></li><li>再次向列表中添加一个元素, 此时 <code>minCapacity</code> 为 2, 而 <code>elementData.length</code> 已经变成了 10, <code>minCapacity - elementData.length &gt; 0</code> 不成立, 所以不会执行 <code>grow()</code> 方法</li><li>依次向列表中添加第3、第4...第10个元素, 都不会执行 <code>grow()</code> 方法</li><li>直到第11个元素, <code>minCapacity</code> 为 11, 而 <code>elementData.length</code> 为 10, 此时又会进入 <code>grow()</code> 方法进行扩容</li></ul><p>新的容量是通过 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code> 计算得出的, 这个值可以近似看成原本值的 1.5 倍, 因为 <code>&gt;&gt;</code> 的右移计算相当于数值原本的 1/2, 在奇数的情况下会丢掉小数(11 + 11/2 = 16)</p><div class="hint-container info"><p class="hint-container-title">ensureCapacity 方法</p><p>理论上来说, 在向 ArrayList 中添加大量元素之前最好使用 <code>ensureCapacity()</code> 方法, 来减少扩容的分配次数</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ensureCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> minExpand</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (elementData </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // any size if not default element table</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        ?</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // larger than default for default empty table. It&#39;s already</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // supposed to be at default size.</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        :</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULT_CAPACITY;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (minCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> minExpand) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        ensureExplicitCapacity</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(minCapacity);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h5 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h5><p>LinkedList 是一个基于双向链表实现的集合类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 部分源码</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> LinkedList</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> AbstractSequentialList</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    implements</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> List</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;, </span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">Deque</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;, </span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">Cloneable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, java.io.</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">Serializable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LinkedList 的族谱:</p><ul><li><code>List</code>: 说明它是一个列表, 支持添加、删除、查找等操作, 并且支持通过下标访问</li><li><code>Deque</code>: 继承自 <code>Queue</code> 接口, 具有双端队列的特性, 支持从两端插入和删除元素, 方便实现栈和队列等数据结构</li><li><code>Cloneable</code>: 说明它支持拷贝操作</li><li><code>Serializable</code>: 说明它可以进行序列化操作</li></ul><p>LinkedList 中的元素是其内部类定义的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    E</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> item</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 节点值</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 指向的下一个节点（后继节点）</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">prev</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 指向的前一个节点（前驱结点）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 初始化参数顺序分别是: 前驱结点、本身节点值、后继节点</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">prev</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> element</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">E</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">        this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">item</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> element;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">        this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> next;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">        this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">prev</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> prev;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),E=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("ol",null,[s("li",null,[s("p",null,"LinkedList 插入和删除的时间复杂度?"),s("ul",null,[s("li",null,[i("头部插入/删除、尾部插入/删除: 只需要修改头、尾结点即可完成插入/删除操作, 时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("指定位置插入/删除: 需要移动到指定位置, 再修改指定结点的指针完成插入/删除操作, 因此需要移动平均 n/2 个元素, 时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])])])]),s("li",null,[s("p",null,"LinkedList 为什么不能实现 RandomAccess 接口?"),s("p",null,"LinkedList 底层数据结构是链表, 内存地址不连续, 只能通过指针来定位, 不支持随机快速访问, 所以不能实现 RandomAccess 接口")])])],-1),g=s("h5",{id:"arraylist-与-linkedlist-的区别",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#arraylist-与-linkedlist-的区别"},[s("span",null,"ArrayList 与 LinkedList 的区别")])],-1),y=s("ul",null,[s("li",null,[i("线程安全: "),s("code",null,"ArrayList"),i(" 和 "),s("code",null,"LinkedList"),i(" 都不能保证线程安全")]),s("li",null,[i("底层数据结构: "),s("ul",null,[s("li",null,[s("code",null,"ArrayList"),i(" 底层使用的是 "),s("strong",null,"Object 数组")]),s("li",null,[s("code",null,"LinkedList"),i(" 底层使用的是 "),s("strong",null,"双向链表"),s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})])])])]),s("li",null,[i("插入/删除是否受元素位置影响: "),s("ul",null,[s("li",null,[s("code",null,"ArrayList"),i(" 采用数组存储, 插入和删除元素的时间复杂度受元素位置的影响, 在执行 "),s("code",null,"add(E e)"),i(" 时的时间复杂度是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i("; 而在指定位置插入和删除的话, 因为第i个元素和第i-1个元素都要执行移位的操作, 所以时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[s("code",null,"LinkedList"),i(" 采用链表存储, 在头尾插入和删除元素的时间复杂度不受元素位置的影响, 时间复杂度都为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i("; 而在指定位置插入和删除的话, 因为需要先移动到指定位置再执行插入和删除, 所以时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])])])]),s("li",null,[i("是否支持快速随机访问: "),s("ul",null,[s("li",null,[s("code",null,"ArrayList"),i(" 实现了 "),s("code",null,"RandomAccess"),i(" 接口说明其支持快速随机访问")]),s("li",null,[s("code",null,"LinkedList"),i(" 不支持随机元素访问")])])]),s("li",null,[i("内存空间占用: "),s("ul",null,[s("li",null,[s("code",null,"ArrayList"),i(" 的空间浪费主要体现在列表的结尾会预留一定的容量空间")]),s("li",null,[s("code",null,"LinkedList"),i(" 的空间花费主要体现在它每一个元素都要存放前驱和后继对象, 所以它比 ArrayList 要消耗更多的空间")])])])],-1),c=a('<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h3><p>Set 接口允许使用者将元素存储在不同的集合中, 类似于数学中的集合, 且它不能有重复的元素</p><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h3><p>Queue 接口支持以先进先出的方式存储和访问元素</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><p>Map 是一个接口, 它定义了一种特定的数据结构, 即键值对（key-value pairs）的集合. 在Map中, 每个键都映射到一个值, 且键是唯一的. 这意味着在一个Map中, 你不能有两个相同的键, 但可以有多个相同的值</p><p>Map 的特点:</p><ul><li><strong>无序性</strong>: 与 List 或 Set 等集合不同, Map 中的元素（键值对）是无序的, 即它们的存储和迭代顺序可能与插入顺序不同</li><li><strong>键的唯一性</strong>: Map 中的键必须是唯一的, 不能有两个相同的键. 如果尝试插入具有相同键的新值, 那么旧的值将被新值覆盖</li><li><strong>值的可重复性</strong>: 与键不同, Map 中的值可以是重复. 也就是说, 可以有多个键值对具有相同的值</li></ul><div class="hint-container tip"><p class="hint-container-title">Map 对于 null 值的处理</p><p>Map 本身是支持 null 键以及 null 值的</p><ul><li>对与 null 建: <code>HashMap</code>、<code>LinkedHashMap</code> 和 <code>TreeMap</code> 都是支持 null 键的, 但使用 null 键时必须确保其在 Map 中是唯一的, 因为 Map 的键必须是唯一的</li><li>对于 null 值: 所有的 Map 实现类都允许使用 null 值, 且一个 Map 中可以有多个 null 值</li></ul></div><p>以下是 Map 的类图关系:</p>',10),D=a(`<h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h3><p>HashMap 主要用来存放键值对, 它基于哈希表的 Map 接口实现, 是常用的 Java 集合之一, 是非线程安全的</p><p>在 JDK1.8 之前, HashMap 的底层存储是数据加链表实现的, 数组是 HashMap 的主体, 链表则是为了解决哈希冲突而存在的（<em>拉链法</em><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>）; 而在 JDK1.8 之后, 当链表长度大于阈值（默认值为 8）时, 链表将会转化为红黑树(将链表转换成红黑树前会判断, 如果当前数组的长度小于 64, 那么会选择先进行数组扩容, 而不是转换为红黑树), 以减少搜索时间</p><p>HashMap 默认的初始化大小为 16, 之后每次扩充, 容量变为原来的 2 倍, 并且 HashMap 总是使用 2 的幂作为哈希表的大小</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>loadFactor: 负载因子<br> 负载因子是控制数组存放数据的疏密程度, loadFactor 越趋近于 1, 那么数组中的数据机会越多、越密集, 也就是会让链表的长度增加; 而 loadFactor 越趋近于 0, 数组中存放的数据就越少、越稀疏</p><p>loadFactor 太大会导致查找元素的效率低, 太小导致数组的利用率低, 存放的数据会很分散. 官方给的 0.75f 是一个比较好的临界值</p></li><li><p>threshold: 扩容阈值<br><strong>threshold = capacity × loadFactor</strong>, 当 size &gt; threshold 的时候, 就要考虑对数组的扩容了, 说白了它就是<strong>衡量数组需不需要扩容的一个标准</strong></p><p>默认容量为 16, 负载因子为 0.75, 不断的向 HashMap 中存放数据, 当数量超过了 16 * 0.75 = 12 时, 就需要对当前容量进行扩容</p></li></ul></div><p>HashMap 通过 key 的 <code>hashCode</code> 经过扰动函数处理后得到的 hash 值, 然后通过 <code>(n-1) &amp; hash</code> 确定当前元素存放的位置（n是数组长度）, 如果当前位置存在元素的话, 就判断该元素与要存入的元素的 hash 值以及 key 是否相同, 如果相同就直接覆盖, 不相同就通过拉链法解决冲突</p><p>所谓的扰动函数就是 HashMap 的 <code>hash</code> 方法. 使用扰动函数是为了防止一些实现比较差的 <code>hashCode()</code> 方法, 其实就是为了减少碰撞</p><p>JDK 1.7 和 JDK 1.8 的 <code>hash</code> 方法对比:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// ^: 按位异或</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// &gt;&gt;&gt; : 无符号右移, 忽略符号位, 空位都以 0 补齐</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// JDK 1.8</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hash</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> key) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> h</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // key.hashCode(): 返回散列值也就是hashcode</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (key </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">hashCode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 16</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// JDK 1.7</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hash</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> h) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 此函数确保在每个位位置仅相差恒定倍数的hashCode具有有限数量的冲突（在默认负载因子下约为8）</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">^=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 20</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 12</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 7</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (h </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 4</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK 1.8 的 hash 方法相比于 JDK 1.7 的方法更加简化, 而且性能也更好, 但是它们的原理都不变</p><div class="hint-container tip"><p class="hint-container-title">红黑树</p><p>红黑树(Red Black Tree)是一颗自平衡(self-balancing)的二叉排序树(BST), 树上的每一个结点都遵循下面的规则:</p><ul><li>每一个结点都有一个颜色, 要么红色, 要么黑色</li><li>树的根结点为黑色</li><li>每个叶子结点(NULL)都是黑色的</li><li>树中不存在两个相邻的红色结点（即红色结点的父子结点都不能是红色）</li><li>从任意一个结点（包括根结点）到其任何后代叶子结点(NULL, 默认是黑色)的每条路径都具有相同数量的黑色结点</li></ul><p>因为最后一条规则的限制, 插入的数据总是红色的, 然后通过旋转(左旋\\右旋)和变色来保证树平衡, 那么会有下面几种情况:</p><ul><li>父结点是黑色, 不用调整</li><li>父结点是红色: <ul><li>叔结点是空的, 旋转+变色</li><li>叔结点是红色, 父结点、叔结点变黑色, 祖父结点变红色</li><li>叔结点是黑色, 旋转+变色</li></ul></li></ul><p>JDK 1.8 中 HashMap 的红黑树怎么声明的呢?</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> LinkedHashMap.Entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">parent</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;  </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// red-black tree links</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">prev</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;    </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// needed to unlink next upon deletion</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> red</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到红黑树继承了 <code>LinkedHashMap.Entry&lt;K, V&gt;</code>, 而 <code>Entry&lt;K, V&gt;</code> 又是继承自 <code>HashMap.Node&lt;K, V&gt;</code> 的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// LinkedHashMap.Entry&lt;K, V&gt;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> HashMap.Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">before</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">after</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// HashMap.Node&lt;K, V&gt;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">implements</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> Map.Entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> hash</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> K</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    V</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意两个属性: <code>TreeNode&lt;K, V&gt;.prev</code> 和 <code>HashMap.Node&lt;K, V&gt;.next</code>, 这说明 HashMap 中的红黑树同时也是一个双向链表</p></div><blockquote><p>TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都用到了红黑树, 而红黑树就是为了解决二叉查找树的缺陷, 因为二叉查找树在某些情况下会退化成一个线性结构</p></blockquote><p>看一下 <code>put()</code> 方法的源码, 了解底层是如何处理链表到红黑树的转换的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 使用列表而不是树的计数阈值</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> TREEIFY_THRESHOLD</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 8</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 对列表进行树化的最小阈值</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> MIN_TREEIFY_CAPACITY</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 64</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> V</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> key, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> value) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> putVal</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">hash</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(key), key, value, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">false</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> V</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> putVal</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> key, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> value, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> onlyIfAbsent, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> evict) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">tab</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> n</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((tab </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> table) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> tab</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (tab </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> resize</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()).</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果计算出的数组位置上没有元素</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((p </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> tab[i </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash]) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 创建一个新的结点并存入</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        tab[i] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> newNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(hash, key, value, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果计算出的数组位置上有元素</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> k</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 且 hash 和 key 都相同, 那么就覆盖</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hash</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((k </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> key </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">||</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (key </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">equals</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(k))))</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> p;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (p </span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">instanceof</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> TreeNode)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 插入红黑树</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">K,V</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)p).</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">putTreeVal</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, tab, hash, key, value);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // for 循环遍历链表</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> binCount</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; ; </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">binCount) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 遍历到最后一个结点</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 尾插法插入数据</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                    p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> newNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(hash, key, value, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 当链表元素个数大于等于8个的时候</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (binCount </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> TREEIFY_THRESHOLD </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -1 for 1st</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                        // 转换红黑树（并不是执行了方法就会变成红黑树）</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">                        treeifyBin</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(tab, hash);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    break</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hash</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((k </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> key </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">||</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (key </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> key</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">equals</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(k))))</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    break</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                p </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 找到一个已经存在的 key 然后替换原本的 value 并返回</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) { </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// existing mapping for key</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">            V</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> oldValue</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">onlyIfAbsent </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">||</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldValue </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> value;</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            afterNodeAccess</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(e);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldValue;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">modCount;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 添加元素后的数组长度大于扩容阈值了会触发 resize() 进行扩容</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">size </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> threshold)</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        resize</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    afterNodeInsertion</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(evict);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> treeifyBin</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">K,V</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] tab, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> n</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">index</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 判断当前列表的长度是否达到了转换成树的阈值(64)</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (tab </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> tab</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MIN_TREEIFY_CAPACITY)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /*</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 如果长度小于 64, 那么只是对数组进行扩容. resize 会重新 hash,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 原本的链表的元素有可能变少, 也可以说一定程度上优化了存取性能</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         */</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        resize</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> tab[index </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hash]) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 数组长度大于 64, 转换成红黑树</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hd</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, tl </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        do</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 转换成 TreeNode</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">            TreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">p</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> replacementTreeNode</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(e, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (tl </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // TreeNode 的第一个元素(双向链表的第一个结点)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                hd </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> p;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 这里的 TreeNode 变成了双向链表</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                p</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">prev</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> tl;</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                tl</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> p;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            tl </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> p;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">while</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((tab[index] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hd) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            /*</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * 真正转换的逻辑</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * 首先通过遍历链表, 依次通过 hashcode、compareTo(实现 Comparable&lt;?&gt; 接口)、</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * getClass().getName()、System.identityHashCode() 来比较各个结点的 key 值大小,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * 构建出红黑树</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * 然后将 TreeNode 中变成了红黑树根结点的元素移动到链表的最前面</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             * 最后验证一下红黑树是不是满足规范</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">             */</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            hd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">treeify</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(tab);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为什么-hashmap-的长的是-2-的幂次方" tabindex="-1"><a class="header-anchor" href="#为什么-hashmap-的长的是-2-的幂次方"><span>为什么 HashMap 的长的是 2 的幂次方</span></a></h4><p>为了能让 HashMap 存取高效, 应当减少碰撞, 也就是要尽量把数据分配均匀. Hash 值的范围值是 -2147483648 到 2147483647, 大概有 40 亿的映射空间, 只要哈希函数映射得比较均匀松散, 一般应用是很难出现碰撞的. 但是问题是一个 40 亿长度的数组, 内存也是放不下的. 所以这个散列值不能拿来直接用, 一般都会对数组的长度取模运算, 得到的余数才是用来存放对应的数组下标. 而这个计算下标的方法是 <code>(n - 1) &amp; hash</code> (n是数组长度)</p><p><strong>在取余(%)操作中, 如果除数是 2 的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 <code>hash % length == hash &amp; (lenght - 1)</code>, 前提是 length 是 2 的 n 次方）</strong>, 并且由于采用的是二进制位操作 &amp;, 相对于 % 取余运算能够提高运算效率, 这就解释了为什么 HashMap 的长度是 2 的幂次方</p><h4 id="初始化-hashmap-时指定的大小等于它创建后的大小吗" tabindex="-1"><a class="header-anchor" href="#初始化-hashmap-时指定的大小等于它创建后的大小吗"><span>初始化 HashMap 时指定的大小等于它创建后的大小吗?</span></a></h4><p>先说结论, <strong>不等于</strong></p><p>在使用带有 <code>initialCapacity</code> 参数的构造方法创建 HashMap 时, 会执行一个 <code>tableSizeFor()</code> 的方法, 这个方法的计算结果会被赋值给 <code>threshold</code>(扩容时的阈值), 在第一次 put 元素的时候, 触发 <code>resize()</code>, 这里的逻辑会将 <code>threshold</code> 赋值给 <code>newCap</code>(新的容量), 然后再重新计算 <code>threshold</code>, 然后再创建 HashMap. 而 <code>tableSizeFor()</code> 计算的结果并不等于 <code>initialCapacity</code>, 所以初始化 HashMap 时指定的大小不等于它创建后的大小</p><p>下面看下源码的实现:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> HashMap</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> initialCapacity, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">float</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> loadFactor) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (initialCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> IllegalArgumentException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Illegal initial capacity: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                                            initialCapacity);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (initialCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        initialCapacity </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (loadFactor </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Float</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isNaN</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(loadFactor))</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> IllegalArgumentException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Illegal load factor: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                                            loadFactor);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">    this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">loadFactor</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> loadFactor;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">    this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">threshold</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> tableSizeFor</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(initialCapacity);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 这里是很牛逼的操作哦</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 简单来说这个算法是将给定的值的二进制的最高位通过不断右移使其后面的值全部为 1,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 再通过 +1 使其进位, 来得到一个大于 cap 的最小的 2 的幂次方的数</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * n |= n &gt;&gt;&gt; x; 为什么执行5次, 因为 2^5 = 32, 也就是一个 int 的长度,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 也就是说不管这个数是多少, 经过这些操作都能使 cap 的二进制值经转换后全变为 1</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">static</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> tableSizeFor</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> cap) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 先减一是为了保证 8 16 这种本就是 2 的幂次方的值不被扩大</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> n</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> cap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 将元素据右移x位并进行或操作</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">|=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">|=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">|=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 4</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">|=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 8</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">|=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;&gt;&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 16</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 最后保证值不会超过 MAXIMUM_CAPACITY, 然后 +1 来使其变成大于 cap 的最小的 2 的幂次方</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> n </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">K,V</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">resize</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">oldTab</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> table;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> oldCap</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldTab </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> oldTab</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> oldThr</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> threshold;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> newCap</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">newThr</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 旧容量大于 0</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            threshold </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Integer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">MAX_VALUE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldTab;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // newCap = oldCap &lt;&lt; 1 新容量为旧容量的两倍</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;&lt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                  oldCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULT_INITIAL_CAPACITY)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            newThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;&lt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// double threshold</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 旧容量为 0 但扩容阈值大于 0</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// initial capacity was placed in threshold</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 使用带有初始化大小的构造函数创建 HashMap 第一次扩容就是这里初始化容量的</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 把旧扩容阈值赋值给新容量</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldThr;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {               </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// zero initial threshold signifies using defaults</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 无参构造函数创建的 HashMap 第一次扩容就是这里初始化容量的</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULT_INITIAL_CAPACITY;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)(DEFAULT_LOAD_FACTOR </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">*</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DEFAULT_INITIAL_CAPACITY);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 新扩容阈值为 0 则通过新容量计算</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (newThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        float</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> ft</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">float</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">*</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> loadFactor;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        newThr </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> MAXIMUM_CAPACITY </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ft </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">float</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)MAXIMUM_CAPACITY </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                  (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)ft </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Integer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">MAX_VALUE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    threshold </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> newThr;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 使用新容量创建一个新的数组</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">SuppressWarnings</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;rawtypes&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;unchecked&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">})</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">newTab</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">K,V</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[])</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[newCap];</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    table </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> newTab;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果原本的数组不为空, 需要将原数据转移至新数组</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (oldTab </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; j </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldCap; </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">j) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">            Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldTab[j]) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                oldTab[j] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 原本只有一个结点</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 重新计算数组索引</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    newTab[</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hash</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (newCap </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 处理红黑树</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">instanceof</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> TreeNode)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    /*</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                     * 遍历树的元素将它们重新计算 hash 放入新的数组中</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                     * 按照和处理链表类似的处理逻辑变成两个链表,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                     * 当新的链表长度小于 6 时, 重新转换为链表,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                     * 否则将其索引指向相应的位置(index 或者 index + oldCap)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                     */</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    ((</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">K,V</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)e).</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">split</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, newTab, j, oldCap);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 处理链表</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// preserve order</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 拆分链表 一个low 一个 high</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">loHead</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, loTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hiHead</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, hiTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                    Node</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">K</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">V</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 遍历链表</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    do</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        next </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                        // 拆分的标准</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">e</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">hash</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldCap) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (loTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                                loHead </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                            else</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                                loTail</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                            loTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                        else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (hiTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                                hiHead </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                            else</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                                hiTail</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                            hiTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> e;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">while</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((e </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> next) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (loTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                        loTail</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                        // low 的链表直接在原位置</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        newTab[j] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> loHead;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (hiTail </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                        hiTail</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                        // high 的链表在原位置+ oldCap 的位置</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        newTab[j </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> oldCap] </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hiHead;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> newTab;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"关于拆分标准 (e.hash & oldCap) == 0 和数组下标 j、j+oldCap"),s("p",null,"首先要知道的是:"),s("ul",null,[s("li",null,[i("oldCap 一定是 2 的整数次幂, 假设是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"2^m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])])])])])])])])])]),s("li",null,[i("newCap 是 oldCap 的 2 倍, 值是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"m"),s("mo",null,"+"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"2^{m+1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"m"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[i("hash 对数组大小取模 "),s("code",null,"(n - 1) & hash"),i(" 其实就是取 hash 的低 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m")])])]),i(" 位")])]),s("p",null,[i("举个栗子, 假设 oldCap = 8, 即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"3")])]),s("annotation",{encoding:"application/x-tex"},"2^3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])]),i(", (8 - 1 = 7) 的二进制为 "),s("code",null,"0000 0000 0000 0000 0000 0000 0000 0111"),i(", 那么 "),s("code",null,"(8 - 1) & hash"),i(" 其实就是取 hash 值的低 3 位, 这里假设为 "),s("code",null,"abc"),i(", 依次类推, 扩容后的大小为 16, 那么 "),s("code",null,"(16 - 1) & hash"),i(" 其实就是取 hash 的低 4 位, 也就两种情况:")]),s("blockquote",null,[s("p",null,[i("0abc"),s("br"),i(" 1abc")])]),s("p",null,[s("code",null,"0abc"),i(" 跟原来的 index 值一致, 而 "),s("code",null,"1abc = 0abc + 1000 = 0abc + oldCap"),i(", 重点来了, 虽然数组大小扩大了一倍, 但是同一个 key 在新旧 table 中对应的数组下标 index 却存在一定的联系: "),s("strong",null,"要么跟以前一致, 要么相差一个 oldCap")]),s("p",null,"而新旧 index 是否跟原本一致就体现在 hash 的第 3 位(最低位是第0位), 怎么拿到这一位的值呢?"),s("blockquote",null,[s("p",null,[s("code",null,"hash & 0000 0000 0000 0000 0000 0000 0000 1000")])]),s("p",null,[i("上面的式子不就是 "),s("code",null,"hash & 8"),i(", 而 8 不就是原本的数组长度吗, 所以:")]),s("blockquote",null,[s("p",null,[i("如果 "),s("code",null,"(e.hash & oldCap) == 0"),i(" 则该节点在新数组的下标与原数组一致都为 "),s("code",null,"j"),s("br"),i(" 如果 "),s("code",null,"(e.hash & oldCap) == 1"),i(" 则该节点在新数组的下标为原数组下标 "),s("code",null,"j + oldCap")])]),s("p",null,"根据这个条件将原始的链表拆分为两个链表, 然后一次性将整个链表存入到新的数组中")],-1),C=a(`<p>有个特殊情况需要注意下, 若指定初始容量为 0 或者 1 来创建 HashMap 时, 第一次调用 <code>put()</code> 方法时会触发两次 <code>resize()</code>, 因为不管指定容量为 0 还是 1 , 经 <code>tableSizeFor()</code> 方法计算出来的初始容量都为 1, 也就是说第一次执行 <code>resize()</code> 方法后数组的容量为 1 而 <code>threshold</code> 为 0, 在 <code>putVal()</code> 方法最后会判断一次 <code>++size &gt; threshold</code>, 而此时条件成立<code>(size=1,threshold=0)</code>会再次执行 <code>resize()</code> 方法, 完成后数组的容量变为 2</p><h4 id="hashmap-多线程操作导致死循环" tabindex="-1"><a class="header-anchor" href="#hashmap-多线程操作导致死循环"><span>HashMap 多线程操作导致死循环</span></a></h4><p>JDK 1.7 及之前版本的 HashMap 在多线程环境下扩容操作可能存在死循环问题. 首先需要知道的是 JDK 1.7 链表采用的是头插法添加元素, 而在一个位置上有多个元素需要进行扩容时, 多个线程同时对链表进行操作, 头插法可能会导致链表中的结点指向错误的位置, 从而形成一个环形链表, 使得查询元素的操作陷入死循环. 可以在搜索引擎上查询关键字 <a href="https://cn.bing.com/search?q=HashMap+Infinite+Loop" target="_blank" rel="noopener noreferrer"><code>HashMap Infinite Loop</code></a> 了解更多</p><p>为了解决这个问题, JDK 1.8 的 HashMap 采用了尾插法来避免链表倒置, 避免变成环型结构. 但是依旧不建议在多线程中使用 HashMap, 会存在数据覆盖、不准确的问题</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>头插法: 将元素插在链表头部</p><ul><li>做法是直接将新元素作为头结点, next 指向旧的头结点, 所以插入速度快</li><li>因为头结点每次都会变化, 也就是最新的, 所以遍历是按照插入的相反顺序进行的</li><li>因为头结点不断变化, 所以需要额外的维护头结点的引用</li></ul></li><li><p>尾插法: 将元素插在链表尾部</p><ul><li>做法是将新元素插入到原本链表的尾部, 需要遍历链表直到某个结点的 next 为 null, 然后将其指向新添加的元素即可</li><li>头结点固定不变</li><li>遍历顺序就是插入顺序</li></ul></li></ul></div><h4 id="hashmap-为什么多线程不安全" tabindex="-1"><a class="header-anchor" href="#hashmap-为什么多线程不安全"><span>HashMap 为什么多线程不安全</span></a></h4><p>前面也提到了, JDK 1.7 的 HashMap 在多线程下扩容可能会造成死循环和数据丢失问题, 虽然 JDK 1.8 做了改进, 但是依旧不能解决数据丢失的问题</p><p>数据丢失是怎么产生的呢?</p><ul><li>在插入元素的时候, 如果两个线程同时进行 put, 并且发生了哈希冲突</li><li>不同的线程可能在不同的时间片获得CPU执行的机会, 当前线程1执行完哈希冲突判断后, 由于时间片耗尽挂起, 而线程2先完成了插入操作</li><li>随后, 线程1获得时间片, 由于之前已经进行过 hash 碰撞的判断, 所以此时会直接进行插入, 这就导致线程2插入的数据被线程1覆盖了</li></ul><h4 id="hashmap-的遍历方式" tabindex="-1"><a class="header-anchor" href="#hashmap-的遍历方式"><span>HashMap 的遍历方式</span></a></h4><ul><li>使用迭代器的方式遍历 <ul><li>迭代器的 EntrySet</li><li>迭代器的 KeySet</li></ul></li><li>ForEach方式遍历 <ul><li>ForEach EntrySet</li><li>ForEach KeySet</li></ul></li><li>使用 Lambda 表达式遍历</li><li>使用 Stream API 遍历 <ul><li>Stream API 单线程遍历</li><li>Stream API 多线程遍历</li></ul></li></ul><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable"><span>Hashtable</span></a></h3><p><code>Hashtable</code>类也是实现<code>Map</code>接口的一个类, 它提供了线程安全的哈希表实现. 与<code>HashMap</code>相比, <code>Hashtable</code>的主要区别在于它的线程安全性</p><p><code>Hashtable</code>的一些特点和使用方法:</p><ol><li><strong>线程安全性</strong>: <code>Hashtable</code>是线程安全的, 因为它的大多数方法（如<code>put</code>、<code>get</code>、<code>remove</code>等）都是同步的. 这意味着在多线程环境中, 多个线程可以安全地同时访问和修改<code>Hashtable</code>, 而不需要额外的同步措施</li><li><strong>性能</strong>: 由于<code>Hashtable</code>的同步机制, 它在单线程环境下的性能通常不如<code>HashMap</code>. 因为每次只有一个线程能够执行<code>Hashtable</code>的方法, 这会导致线程之间的竞争和阻塞, 从而降低程序的执行效率</li><li><strong>不允许<code>null</code>键和值</strong>: 与<code>HashMap</code>不同, <code>Hashtable</code>不允许使用<code>null</code>作为键（key）或值（value）. 如果尝试插入<code>null</code>键或值, <code>Hashtable</code>会抛出<code>NullPointerException</code></li><li><strong>失败率</strong>: <code>Hashtable</code>使用了一种称为“失败率”的机制来处理哈希冲突. 当两个不同的键具有相同的哈希码时, <code>Hashtable</code>会将这些键存储在不同的桶（bucket）中, 以确保每个键都能被唯一地定位</li></ol><p>下面是一个<code>Hashtable</code>的简单使用示例:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#DA5221;--shiki-dark:#D4D4D4;"> java.util.Hashtable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> HashtableExample</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 创建一个Hashtable实例</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Hashtable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">table</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Hashtable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 向Hashtable中添加键值对</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;apple&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;banana&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;orange&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 获取键对应的值</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        int</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> appleCount</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;apple&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Apple count: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> appleCount); </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 输出: Apple count: 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 检查Hashtable中是否包含某个键</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        boolean</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> hasBanana</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">containsKey</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;banana&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Has banana: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> hasBanana); </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 输出: Has banana: true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 遍历Hashtable</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Map</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">entry</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> table</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">entrySet</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Key: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getKey</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &quot;, Value: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> entry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getValue</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">());</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 <code>Hashtable</code> 是线程安全的, 但 Java 5 及更高版本引入了 <code>ConcurrentHashMap</code> 类, 它提供了更高的并发性能, 是处理并发哈希表操作的推荐选择</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>JDK1.6 之前为循环链表, JDK1.7 取消了循环 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>拉链法: 将链表和数组相结合. 也就是说创建一个链表数组, 数组中每一格就是一个链表, 若遇到哈希冲突, 则将冲突的值加到链表中即可 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,20);function v(B,u){const n=e("Mermaid");return k(),t("div",null,[d,l(n,{id:"mermaid-96",code:"eJyNkt9OgzAUxu/3FE1MduV4AEaWqCzRBGd0xhvjxRmcYaXALJ2JUXl2D5Q/ZQ7XK9rfd77DafuFAorC5xBLSCeMRVxiqHieseCBtrXKbhRK2AgslyX7IsqY5/GM4BZCXCyI/HS1V7kQuoNNdcALZVO3Rquy+z3uraa8kBI+fXw3q0sUmGKmCpfdbd7oDM8vfz3DgVuLDwpGXAHPEowObFsuC+UamrPKo2oULZNxTO0bP9G/ctk3PTs9yzqXCiPLu1zBB4+rV7esf5Q4LJ2lbt/kFnZToebLcz3YNFbzgfsaitcDN+zcGp+y6nsaadCL423aeDPvezYzAkxSv9FiHbAjvHqlI5gGIlqbNLgUeZjwLG6DOlTbQBKtl0Qdx8jqkPf5IF59/sVdegdUh4iQXjRTKwgTPQYdoGFGdDpODZprr1BboQ1mfEg1t9rZ5IW0pkd7k8ZrTn4B0M11Pw=="}),r,E,g,y,c,l(n,{id:"mermaid-420",code:"eJyNUr1uwjAQ3nkKT0xNHiBELG2lSqUMbdWl6nCNj2ARbHQ5kBCQZ8dYGDAmkC2578f38xUV1PWLgpJg3hNCKsKCldFi9Gl/HSo+YCGa96efRmxsTYg8V5qRJlDgcGgruxPz2ehiSYSau2u+DDHK7vwxrFQJ/xV2l7xBPb1mN3zwyDyWjo3EfsUDS+mXPPj9ixycoNXDfaavmmndbjNSeobyZjtTBJmFhMjNP6qqDsxbV7m3iIj1aJhvwugGCRnDmYfa2jqo8m2SnG9/Kqapv8h1ybV5KQ7CZgE/nAOD9VjwnDIHX4bIokGm3IvHCSwWZtqB0ap6ezalCMQ="}),D,o,C])}const A=h(p,[["render",v],["__file","Collection.html.vue"]]),f=JSON.parse('{"path":"/docs/note/back-end/java/Collection.html","title":"Java 集合","lang":"zh-CN","frontmatter":{"title":"Java 集合","date":"2023-09-04T00:00:00.000Z","order":3,"description":"集合是什么 计算机科学中, 集合的定义是一组可变数量的数据项（也可能为 0 个）的组合, 这些数据项可能共享某些特征, 需要以某种操作方式一起进行操作 Java 集合框架是一个用来代表和操纵集合的统一架构, 它提供了一套性能优良, 使用方便的接口和类, Java 集合框架位于 java.util 包中 Java 集合也可以称为容器, 主要由两大接口派生...","head":[["meta",{"property":"og:url","content":"https://blog.white233.top/docs/note/back-end/java/Collection.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"Java 集合"}],["meta",{"property":"og:description","content":"集合是什么 计算机科学中, 集合的定义是一组可变数量的数据项（也可能为 0 个）的组合, 这些数据项可能共享某些特征, 需要以某种操作方式一起进行操作 Java 集合框架是一个用来代表和操纵集合的统一架构, 它提供了一套性能优良, 使用方便的接口和类, Java 集合框架位于 java.util 包中 Java 集合也可以称为容器, 主要由两大接口派生..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T09:12:43.000Z"}],["meta",{"property":"article:author","content":"White"}],["meta",{"property":"article:published_time","content":"2023-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T09:12:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-07T09:12:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"White\\",\\"url\\":\\"https://blog.white233.top\\",\\"email\\":\\"white996@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"集合是什么","slug":"集合是什么","link":"#集合是什么","children":[]},{"level":2,"title":"Collection","slug":"collection","link":"#collection","children":[{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"Set","slug":"set","link":"#set","children":[]},{"level":3,"title":"Queue","slug":"queue","link":"#queue","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]},{"level":3,"title":"Hashtable","slug":"hashtable","link":"#hashtable","children":[]}]}],"git":{"createdTime":1695262483000,"updatedTime":1717751563000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":6}]},"readingTime":{"minutes":29.79,"words":8938},"filePathRelative":"docs/note/back-end/java/Collection.md","localizedDate":"2023年9月4日","excerpt":"<h2>集合是什么</h2>\\n<blockquote>\\n<p>计算机科学中, 集合的定义是一组可变数量的数据项（也可能为 0 个）的组合, 这些数据项可能共享某些特征, 需要以某种操作方式一起进行操作</p>\\n</blockquote>\\n<p>Java 集合框架是一个用来代表和操纵集合的统一架构, 它提供了一套性能优良, 使用方便的接口和类, Java 集合框架位于 <code>java.util</code> 包中</p>\\n<p>Java 集合也可以称为容器, 主要由两大接口派生而来: <code>java.util.Collection</code> 以及 <code>java.util.Map</code>, 其中 Collection 主要存放单个的数据对象, 而 Map 主要存放 key-value 的键值对对象</p>","autoDesc":true}');export{A as comp,f as data};
