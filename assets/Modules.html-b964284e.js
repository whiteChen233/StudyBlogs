import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,d as n,e as s,b as c,f as l}from"./app-2453c26d.js";const i={},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},r=l(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><blockquote><p>Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。</p><p>因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 Javascript 库和框架 已经开始了模块的使用（例如， CommonJS 和基于 AMD 的其他模块系统 如 RequireJS, 以及最新的 Webpack 和 Babel）。</p><p>--- <em>摘自 MDN</em></p></blockquote><p>在模块化之前通常 javascript 的代码会保存在不同的 js 文件中维护,这样的维护方式，会带来一些问题：</p><ul><li>全局变量同名</li><li>引入 js 的依赖顺序</li></ul><h2 id="使用模块作为出口" tabindex="-1"><a class="header-anchor" href="#使用模块作为出口" aria-hidden="true">#</a> 使用模块作为出口</h2><p>上面的问题可以使用匿名函数解决全局变量的问题，但是会带来一个新的问题：代码不能复用了。<br> 于是模块化的思想出现了，它将匿名函数中需要对外暴露的属性、方法通过添加到一个对象里，将这个对象返回，并在函数外面使用一个变量接收，这就是一个&#39;模块&#39;了。在其他地方使用前面定义的变量.来调用属性或者方法</p><p>常见的模块化规范：<br> CommonJS、AMD、CMD、也有 ES6 的 Modules</p><p>模块化有两个核心: <strong>导入和导出</strong></p><h3 id="commonjs-中的使用" tabindex="-1"><a class="header-anchor" href="#commonjs-中的使用" aria-hidden="true">#</a> CommonJS 中的使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下代码需要运行环境支持</span>

<span class="token comment">// 导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入</span>
<span class="token comment">// CommonJS模块</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">const</span> _moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> flag <span class="token operator">=</span> _moduleA<span class="token punctuation">.</span>flag<span class="token punctuation">;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> _moduleA<span class="token punctuation">.</span>test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6-中的使用" tabindex="-1"><a class="header-anchor" href="#es6-中的使用" aria-hidden="true">#</a> ES6 中的使用</h3><ul><li>使用关键字: <code>export</code>导出,<code>import</code>导入</li></ul><p>导出的功能都是由 named exports 组成— 每个项目（无论是函数，常量等）在导出时都由其名称引用，并且该名称也用于在导入时引用它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>
<span class="token comment">// 方式一</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 方式二</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认导出 versus 命名导出</li></ul><p>还有一种导出类型叫做 default export —这样可以很容易地使模块提供默认功能，并且还可以帮助 JavaScript 模块与现有的 CommonJS 和 AMD 模块系统进行互操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认导出，一个模块只能有一个default</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入的时候可以自定义名字</span>
<span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">&#39;ModuleA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重命名导出与导入" tabindex="-1"><a class="header-anchor" href="#重命名导出与导入" aria-hidden="true">#</a> 重命名导出与导入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重命名导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> function1 <span class="token keyword">as</span> newFunc1<span class="token punctuation">,</span> function2 <span class="token keyword">as</span> newFunc2 <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> newFunc1<span class="token punctuation">,</span> newFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> function1<span class="token punctuation">,</span> function2 <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 重命名导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> function1 <span class="token keyword">as</span> newFunc1<span class="token punctuation">,</span> function2 <span class="token keyword">as</span> newFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建模块对象" tabindex="-1"><a class="header-anchor" href="#创建模块对象" aria-hidden="true">#</a> 创建模块对象</h4><p>导入每一个模块功能到一个模块功能对象上。可以使用以下语法形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ModuleA <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用</span>
ModuleA<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ModuleA<span class="token punctuation">.</span>prop1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function d(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[n("p",null,[s("参考 > MDN-"),n("a",u,[s("JavaScript modules 模块"),c(a)])]),r])}const f=e(i,[["render",d],["__file","Modules.html.vue"]]);export{f as default};
