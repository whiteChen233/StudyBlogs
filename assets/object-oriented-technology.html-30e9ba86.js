import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as h,d as t,g as d,b as a,e as r}from"./app-babb0cbf.js";const c={},n=r("<hr><p>面向对象分析（OOA）的目的是为了获得对应问题的理解，理解的目的是确定系统的功能、性能要求。</p><p>面向对象分析包括 5 个活动：认定对象、组织对象、描述对象间的相互作用、确定对象的操作、定义对象的内部信息。</p><p><code>面向对象分析阶段要建立独立于实现的系统分析模型，着重分析问题域和系统责任。不考虑系统实现与系统测试问题。</code></p><hr><p>对象的组成部分包括：<code>对象名</code>，<code>状态（属性）</code>，<code>行为（操作）</code>。类是对对象共有属性和行为的抽象，因此一个类定义的对象共享<code>行为</code>和<code>属性</code>。</p><p><code>对象抽象成类，类实例化称对象。</code></p><p>对象的状态是指其属性与属性值的一个组合。</p><hr><table><thead><tr><th>分类</th><th>说明</th></tr></thead><tbody><tr><td>参数多态</td><td>应用广泛、最纯的多态</td></tr><tr><td>包含多态</td><td>同样的操作可用于一个类型及其子类型。包含多态一般需要进行运行时的类型检查</td></tr><tr><td>强制多态</td><td>编译程序通过语义操作，把操作对象的类型强行加以变换，以符合函数或操作符的要求</td></tr><tr><td>过载多态</td><td>同一个名（操作符、函数名）在不同上下文中有不同的类型</td></tr></tbody></table><hr><p>面向对象中类可以分三类：</p><ul><li>实体类：实体类的对象表示现实世界中真实的实体，如人、物等</li><li>接口类（边界类）：接口类的对象为用户提供一种与系统合作交互的方式，分为人和系统两大类，其中人的接口可以是显示屏、窗口、Web 窗体、对话框、列表框、其它显示控制、条形码、二维码或者用户与系统交互的其他方法；系统的接口涉及到把数据发送到其他系统，或者从其他系统接受数据</li><li>控制类：控制类的对象用来控制活动流，充当协调者</li></ul><hr><p>设计原则</p><table><thead><tr><th>原则</th><th>说明</th></tr></thead><tbody><tr><td>单一职责原则</td><td>设计目的单一的类</td></tr><tr><td>开放-封闭原则</td><td>对扩展开放，对修改关闭</td></tr><tr><td>里氏代换原则</td><td>子类可以替换父类</td></tr><tr><td>依赖倒置原则</td><td>要以来与，而不是实现；针对接口编程，不要针对实现编程</td></tr><tr><td>接口隔离原则</td><td>使用多个专门的接口比使用单一的总接口要好</td></tr><tr><td>组合重用原则</td><td>要尽量使用组合，而不是继承关系达到重用的目的</td></tr><tr><td>迪米特原则</td><td>一个对象应当对其他对象有尽可能少的了解</td></tr></tbody></table><hr><p>UML</p><ul><li>事物 <ul><li>结构事物</li><li>行为事物</li><li>分组事物</li><li>注释事务</li></ul></li><li>关系 <ul><li>依赖</li><li>关联</li><li>泛化</li><li>实现</li></ul></li><li>图 <ul><li>结构图（静态图） <ul><li>类图</li><li>对象图</li><li>包图</li><li>组合结构图</li><li>构件图</li><li>部署图</li><li>制品图</li></ul></li><li>行为图（动态图） <ul><li><strong>用例图</strong>：系统和外部的交互关系</li><li>顺序图/序列图：强调按时间顺序</li><li>通信图/协作图：</li><li>定时图</li><li>状态图：状态的变迁转移情况</li><li>活动图：流程图</li><li>交互概览图</li></ul></li></ul></li></ul><hr><p>状态图展现了一个状态机，它由状态、转换、时间和活动组成，通常包括简单状态和组合状态、转换（事件和动作）。</p><ul><li>状态可以是单一的，也可以是嵌套的，所以活动可以在状态内执行，也可以在状态迁移时执行。</li><li>转换是两个状态（源状态、目标状态）之间的一种关系，表示对象在源状态执行一定的事件或动作，并在某个特定的事件发生而某个特定的监护条件满足时离开当前状态而进入目标状态，事件触发没有特定监护条件的迁移，对象也会离开当前状态。</li></ul><hr>",23),p={href:"https://github.com/whiteChen233/design-patterns",target:"_blank",rel:"noopener noreferrer"},s=r("<ul><li>架构模式：软件设计的高层决策，反映了开发软件系统过程中所作的基本设计决策。例如：C/S 结构</li><li>设计模式：主要关注软件系统的设计，与具体的编程语言无关。</li><li>惯用法：最底层的模式，关注软件系统的设计与实现，实现时通过某种特定的程序设计语言来描述构件与构件之间的关系。每种语言都有它自己特定的模式。</li></ul><p>23 种设计模式：</p><ul><li>创建型模式：对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。 <table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>单例（Singleton）模式</td><td>保证一个类只有一个实例，并提供一个访问它的全局访问点。其拓展是有限多例模式。</td></tr><tr><td>原型（Prototype）模式</td><td>用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的对象。也称克隆模型。</td></tr><tr><td>工厂方法（Factory Method）模式</td><td>定义一个创建对象的接口，但由子类决定需要实例化哪一个类。工厂方法使得子类实例化的过程推迟。</td></tr><tr><td>抽象工厂（Abstract Factory）模式</td><td>提供一个接口，可以创建一系列相关或相互依赖的的对象，而无需指定它门具体的类。</td></tr><tr><td>建造者（Builder）模式</td><td>将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</td></tr></tbody></table></li><li>结构型模式：描述如何将类或者对象结合在一起形成更大的结构。 <table><thead><tr><th>名称</th><th>说明</th><th>速记</th></tr></thead><tbody><tr><td>代理（Proxy）模式</td><td>为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</td><td></td></tr><tr><td>适配器（Adapter）模式</td><td>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</td><td>转换接口</td></tr><tr><td>桥接（Bridge）模式</td><td>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</td><td>继承树拆分</td></tr><tr><td>装饰（Decorator）模式</td><td>动态的给对象增加一些职责，即增加其额外的功能。</td><td>附加职责</td></tr><tr><td>外观（Facade）模式</td><td>为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</td><td>对外统一接口</td></tr><tr><td>享元（Flyweight）模式</td><td>运用共享技术来有效地支持大量细粒度对象的复用。</td><td></td></tr><tr><td>组合（Composite）模式</td><td>将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</td><td>树形目录结构</td></tr></tbody></table></li><li>行为型模式：是对不同对象之间划分责任和算法的抽象化。 <table><thead><tr><th>名称</th><th>说明</th><th>速记</th></tr></thead><tbody><tr><td>模板方法（Template Method）模式</td><td>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</td><td></td></tr><tr><td>策略（Strategy）模式</td><td>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</td><td>多方案切换</td></tr><tr><td>命令（Command）模式</td><td>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</td><td>日志记录，可撤销</td></tr><tr><td>职责链（Chain of Responsibility）模式</td><td>把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</td><td>传递职责</td></tr><tr><td>状态（State）模式</td><td>允许一个对象在其内部状态发生改变时改变其行为能力。</td><td>状态变成类</td></tr><tr><td>观察者（Observer）模式</td><td>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</td><td></td></tr><tr><td>中介者（Mediator）模式</td><td>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</td><td>不直接引用</td></tr><tr><td>迭代器（Iterator）模式</td><td>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</td><td></td></tr><tr><td>访问者（Visitor）模式</td><td>在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</td><td></td></tr><tr><td>备忘录（Memento）模式</td><td>在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</td><td></td></tr><tr><td>解释器（Interpreter）模式</td><td>提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</td><td></td></tr></tbody></table></li></ul>",3);function b(u,_){const l=i("ExternalLinkIcon");return o(),h("div",null,[n,t("p",null,[d("设计模式 "),t("a",p,[d("Github"),a(l)])]),s])}const g=e(c,[["render",b],["__file","object-oriented-technology.html.vue"]]);export{g as default};
