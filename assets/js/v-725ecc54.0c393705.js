"use strict";(self.webpackChunknote=self.webpackChunknote||[]).push([[7037],{6105:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6252);const p=[(0,t.uE)('<h2 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤</h2><ol><li>创建组件构造器<br> 调用<code>Vue.extend()</code>方法创建组件构造器，需要传入<code>template:&#39;&#39;</code></li><li>注册组件<br> 调用<code>Vue.component()</code>注册组件,需要传入组件标签，组件构造器</li><li>使用组件<br> 在Vue实例的作用范围内使用组件</li></ol><h2 id="全局组件和局部组件" tabindex="-1"><a class="header-anchor" href="#全局组件和局部组件" aria-hidden="true">#</a> 全局组件和局部组件</h2><ul><li>使用<code>Vue.component()</code>注册组件是全局的</li><li>在Vue实例下使用<code>components: {}</code>注册的是局部组件</li></ul><h2 id="父组件和子组件" tabindex="-1"><a class="header-anchor" href="#父组件和子组件" aria-hidden="true">#</a> 父组件和子组件</h2><p>在<code>Vue.extend()</code>，传入<code>components: {}</code>来注册子组件</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖" aria-hidden="true">#</a> 语法糖</h2><p>直接使用<code>Vue.component(tagName, options)</code>来注册全局组件， 在Vue实例中使用<code>components: { tagName: options }</code>来注册局部组件</p><h2 id="抽离模板的写法" tabindex="-1"><a class="header-anchor" href="#抽离模板的写法" aria-hidden="true">#</a> 抽离模板的写法</h2><p>在HTML中，使用如下的方式声明模板</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 方式一：使用script标签声明 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/x-template<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">...</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 方式二：使用template标签声明 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 使用方式 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 注册全局组件</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;tagName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#id&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件如何访问数据和方法" tabindex="-1"><a class="header-anchor" href="#组件如何访问数据和方法" aria-hidden="true">#</a> 组件如何访问数据和方法</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;tagName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;div&gt;\n        {{ data }}\n        &lt;button @click=&quot;btnClick&quot;&gt;&lt;/button&gt;\n      &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token comment">/*\n     * 为什么data需要是一个函数而不是对象？\n     * 保证使用组件时每个组件内的数据不会相互影响\n     */</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">btnClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ... }</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="父子组件的通信方式" tabindex="-1"><a class="header-anchor" href="#父子组件的通信方式" aria-hidden="true">#</a> 父子组件的通信方式</h2><p>父子组件之间的数据是不能相互引用的，但一般在开发中会有这样的需求，官方给出的解决方案：</p><ul><li>通过<code>props</code>向子组件传递数据</li><li>通过事件<code>$emit</code>向父组件发送消息</li></ul><p>父传子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 父组件模板 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 子组件模板 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btnClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 子组件</span>\n  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#id&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 1.数组</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 2.类型限制</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">msg</span><span class="token operator">:</span> String\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 3.默认值</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 类型时Object或者Array时，default需要是一个factory function</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 是否必传</span>\n        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 父组件</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;msg&#39;</span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      cpn\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子传父：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 父组件模板 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 在父组件中通过v-on监听这个自定义事件 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@btn-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cpnClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 子组件模板 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in books<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btnClick(item)<span class="token punctuation">&quot;</span></span>\n    <span class="token punctuation">&gt;</span></span>\n      {{ item }}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 子组件</span>\n  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#id&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">books</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C#&#39;</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">btnClick</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 发送自定义事件</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;btn-click&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 父组件</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> cpn <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">cpnClick</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="父子组件的访问方式" tabindex="-1"><a class="header-anchor" href="#父子组件的访问方式" aria-hidden="true">#</a> 父子组件的访问方式</h2><p>有时候需要父组件直接访问子组件，或者子组件访问根组件</p><ul><li>父组件访问子组件: <code>$children</code>或<code>$refs</code>。一般不使用<code>$children</code>，而是通过<code>$refs</code>访问，但是使用前需要给子组件添加<code>ref</code>属性使其添加到<code>$refs</code>中</li><li>子组件访问父组件：<code>$parent</code>。使用<code>$root</code>可以访问Vue实例</li></ul>',23)],e={},l=(0,a(3744).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},665:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-725ecc54","path":"/zh/programmer/front-end/Vue2/Component.html","title":"Vue 的组件化","lang":"zh-CN","frontmatter":{"title":"Vue 的组件化","date":"2021-07-05T00:00:00.000Z","description":"基本步骤 1. 创建组件构造器 调用Vue.extend()方法创建组件构造器，需要传入template:\'\' 2. 注册组件 调用Vue.component()注册组件,需要传入组件标签，组件构造器 3. 使用组件 在Vue实例的作用范围内使用组件 全局组件和局部组件 使用Vue.component()注册组件是全局的; 在Vue实例下使用compo...","head":[["meta",{"property":"og:url","content":"https://whiteChen233/whitechen233.github.io/zh/programmer/front-end/Vue2/Component.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"Vue 的组件化"}],["meta",{"property":"og:description","content":"基本步骤 1. 创建组件构造器 调用Vue.extend()方法创建组件构造器，需要传入template:\'\' 2. 注册组件 调用Vue.component()注册组件,需要传入组件标签，组件构造器 3. 使用组件 在Vue实例的作用范围内使用组件 全局组件和局部组件 使用Vue.component()注册组件是全局的; 在Vue实例下使用compo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-10-29T08:29:18.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:published_time","content":"2021-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-29T08:29:18.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://whiteChen233/whitechen233.github.io/en/programmer/front-end/Vue2/Component.html"}]]},"excerpt":"","headers":[{"level":2,"title":"基本步骤","slug":"基本步骤","link":"#基本步骤","children":[]},{"level":2,"title":"全局组件和局部组件","slug":"全局组件和局部组件","link":"#全局组件和局部组件","children":[]},{"level":2,"title":"父组件和子组件","slug":"父组件和子组件","link":"#父组件和子组件","children":[]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]},{"level":2,"title":"抽离模板的写法","slug":"抽离模板的写法","link":"#抽离模板的写法","children":[]},{"level":2,"title":"组件如何访问数据和方法","slug":"组件如何访问数据和方法","link":"#组件如何访问数据和方法","children":[]},{"level":2,"title":"父子组件的通信方式","slug":"父子组件的通信方式","link":"#父子组件的通信方式","children":[]},{"level":2,"title":"父子组件的访问方式","slug":"父子组件的访问方式","link":"#父子组件的访问方式","children":[]}],"git":{"createdTime":1667032158000,"updatedTime":1667032158000,"contributors":[{"name":"White","email":"294476387@qq.com","commits":1}]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"zh/programmer/front-end/Vue2/Component.md","localizedDate":"2021年7月5日"}')}}]);