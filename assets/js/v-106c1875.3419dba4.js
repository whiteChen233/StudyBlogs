"use strict";(self.webpackChunknote=self.webpackChunknote||[]).push([[2656],{754:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},o=(0,e.uE)('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><blockquote><p>Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。</p><p>因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 Javascript 库和框架 已经开始了模块的使用（例如， CommonJS 和基于 AMD 的其他模块系统 如 RequireJS, 以及最新的 Webpack 和 Babel）。</p><p>--- <em>摘自 MDN</em></p></blockquote><p>在模块化之前通常javascript的代码会保存在不同的js文件中维护,这样的维护方式，会带来一些问题：</p><ul><li>全局变量同名</li><li>引入js的依赖顺序</li></ul><h2 id="使用模块作为出口" tabindex="-1"><a class="header-anchor" href="#使用模块作为出口" aria-hidden="true">#</a> 使用模块作为出口</h2><p>上面的问题可以使用匿名函数解决全局变量的问题，但是会带来一个新的问题：代码不能复用了。 于是模块化的思想出现了，它将匿名函数中需要对外暴露的属性、方法通过添加到一个对象里，将这个对象返回，并在函数外面使用一个变量接收，这就是一个&#39;模块&#39;了。在其他地方使用前面定义的变量.来调用属性或者方法</p><p>常见的模块化规范：<br> CommonJS、AMD、CMD、也有ES6的Modules</p><p>模块化有两个核心: <strong>导入和导出</strong></p><h3 id="commonjs-中的使用" tabindex="-1"><a class="header-anchor" href="#commonjs-中的使用" aria-hidden="true">#</a> CommonJS 中的使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下代码需要运行环境支持</span>\n\n<span class="token comment">// 导出</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导入</span>\n<span class="token comment">// CommonJS模块</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">const</span> _moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> flag <span class="token operator">=</span> _moduleA<span class="token punctuation">.</span>flag\n<span class="token keyword">const</span> test <span class="token operator">=</span> _moduleA<span class="token punctuation">.</span>test\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6-中的使用" tabindex="-1"><a class="header-anchor" href="#es6-中的使用" aria-hidden="true">#</a> ES6 中的使用</h3><h4 id="使用关键字-export导出-import导入。" tabindex="-1"><a class="header-anchor" href="#使用关键字-export导出-import导入。" aria-hidden="true">#</a> 使用关键字: <code>export</code>导出,<code>import</code>导入。</h4><p>导出的功能都是由named exports 组成— 每个项目（无论是函数，常量等）在导出时都由其名称引用，并且该名称也用于在导入时引用它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>\n<span class="token comment">// 方式一</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 方式二</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    consloe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导入</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认导出-versus-命名导出。" tabindex="-1"><a class="header-anchor" href="#默认导出-versus-命名导出。" aria-hidden="true">#</a> 默认导出 versus 命名导出。</h4><p>还有一种导出类型叫做 default export —这样可以很容易地使模块提供默认功能，并且还可以帮助JavaScript模块与现有的CommonJS和AMD模块系统进行互操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认导出，一个模块只能有一个default</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 导入的时候可以自定义名字</span>\n<span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">&#39;ModuleA&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重命名导出与导入" tabindex="-1"><a class="header-anchor" href="#重命名导出与导入" aria-hidden="true">#</a> 重命名导出与导入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重命名导出</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>\n  function1 <span class="token keyword">as</span> newFunc1<span class="token punctuation">,</span>\n  function2 <span class="token keyword">as</span> newFunc2\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导入</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> newFunc1<span class="token punctuation">,</span> newFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> function1<span class="token punctuation">,</span> function2 <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 重命名导入</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  function1 <span class="token keyword">as</span> newFunc1<span class="token punctuation">,</span>\n  function2 <span class="token keyword">as</span> newFunc2\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建模块对象" tabindex="-1"><a class="header-anchor" href="#创建模块对象" aria-hidden="true">#</a> 创建模块对象</h4><p>导入每一个模块功能到一个模块功能对象上。可以使用以下语法形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ModuleA <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span>\n\n<span class="token comment">// 使用</span>\nModuleA<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nModuleA<span class="token punctuation">.</span>prop1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',23),p={},i=(0,a(3744).Z)(p,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[(0,e._)("p",null,[(0,e.Uk)("参考 > MDN-"),(0,e._)("a",t,[(0,e.Uk)("JavaScript modules 模块"),(0,e.Wm)(a)])]),o])}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},2106:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-106c1875","path":"/zh/front-end/Vue2/Modules.html","title":"模块化","lang":"zh-CN","frontmatter":{"title":"模块化","date":"2021-07-17T00:00:00.000Z","summary":"参考 > MDN-JavaScript modules 模块 背景 \\" Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。\\" \\"\\" \\" 因此，","head":[["meta",{"property":"og:url","content":"https://whiteChen233/whitechen233.github.io/zh/front-end/Vue2/Modules.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"模块化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-09-30T13:10:46.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:published_time","content":"2021-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-30T13:10:46.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://whiteChen233/whitechen233.github.io/en/front-end/Vue2/Modules.html"}]]},"excerpt":"","headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"使用模块作为出口","slug":"使用模块作为出口","link":"#使用模块作为出口","children":[{"level":3,"title":"CommonJS 中的使用","slug":"commonjs-中的使用","link":"#commonjs-中的使用","children":[]},{"level":3,"title":"ES6 中的使用","slug":"es6-中的使用","link":"#es6-中的使用","children":[]}]}],"git":{"createdTime":1664012965000,"updatedTime":1664543446000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":1},{"name":"white","email":"294487398@qq.com","commits":1}]},"readingTime":{"minutes":2.59,"words":776},"filePathRelative":"zh/front-end/Vue2/Modules.md","localizedDate":"2021年7月17日"}')}}]);