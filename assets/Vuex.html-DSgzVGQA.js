import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as n}from"./app-De7shokQ.js";const l={},e=n(`<h2 id="vuex-是什么" tabindex="-1"><a class="header-anchor" href="#vuex-是什么"><span>Vuex 是什么</span></a></h2><p>Vuex 是一个专门为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式存储管理</strong>应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具<a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener noreferrer">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><p>状态管理又是什么？简单来说，就是把需要多个组件共享的变量全部存储在一个对象里面，然后将整个对象放在顶层的 Vue 实例中，让其他组件可以使用。</p><p>让我们从一个简单的 Vue 计数应用开始：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> Vue</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // state</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  data</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      count:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    };</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // view</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  template:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> \`</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">    &lt;div&gt;{{ count }}&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">  \`</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // actions</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  methods:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">      this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个状态自管理应用包含以下几个部分：</p><ul><li><strong>state</strong>，驱动应用的数据源；</li><li><strong>view</strong>，以声明方式将 state 映射到视图；</li><li><strong>actions</strong>，响应在 view 上的用户输入导致的状态变化。</li></ul><p>以下是一个表示&quot;单向数据流&quot;理念的简单示意：</p><figure><img src="https://vuex.vuejs.org/flow.png" alt="flow.png" width="450" tabindex="0" loading="lazy"><figcaption>Flow</figcaption></figure><p>但是，当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p><p>多个视图依赖于同一状态。<br> 来自不同视图的行为需要变更同一状态。<br> 对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p><p>这就是 Vuex 背后的基本思想，借鉴了 Flux 、Redux 和 The Elm Architecture 。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p><figure><img src="https://vuex.vuejs.org/vuex.png" alt="vuex.png" tabindex="0" loading="lazy"><figcaption>Vuex</figcaption></figure><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><h3 id="直接下载-cdn-引用" tabindex="-1"><a class="header-anchor" href="#直接下载-cdn-引用"><span>直接下载 / CDN 引用</span></a></h3><p><a href="https://unpkg.com/vuex/" target="_blank" rel="noopener noreferrer">Unpkg.com</a> 提供了基于 NPM 的 CDN 链接。以上的链接会一直指向 NPM 上发布的最新版本。您也可以通过 <code>https://unpkg.com/vuex@2.0.0</code> 这样的方式指定特定的版本。</p><p>在 Vue 之后引入 vuex 会进行自动安装：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> src</span><span style="--shiki-light:#0071CE;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;/path/to/vue.js&quot;</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;&lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> src</span><span style="--shiki-light:#0071CE;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;/path/to/vuex.js&quot;</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;&lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span>NPM</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">npm</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> vuex</span><span style="--shiki-light:#174781;--shiki-dark:#CE9178;"> --save</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在一个模块化的打包系统中，您必须显式地通过 <code>Vue.use()</code> 来安装 Vuex：</p><p>import Vue from &#39;vue&#39;<br> import Vuex from &#39;vuex&#39;</p><p>Vue.use(Vuex)<br> 当使用全局 script 标签引用 Vuex 时，不需要以上安装过程。</p><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>Promise</span></a></h3><p>Vuex 依赖 Promise 。如果你支持的浏览器并没有实现 Promise (比如 IE)，那么你可以使用一个 polyfill 的库，例如 es6-promise 。</p><p>你可以通过 CDN 将其引入：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> src</span><span style="--shiki-light:#0071CE;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js&quot;</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;&lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#0071CE;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后 <code>window.Promise</code> 会自动可用。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>每一个 Vuex 应用的核心就是 store（仓库）。&quot;store&quot;基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p></li><li><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></li></ol><h3 id="最简单的-store" tabindex="-1"><a class="header-anchor" href="#最简单的-store"><span>最简单的 Store</span></a></h3><p>安装 Vuex 之后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vue</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vue&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Vue</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">use</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  state:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    count:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以通过 <code>store.state</code> 来获取状态对象，以及通过 <code>store.commit</code> 方法触发状态变更：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">console</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了在 Vue 组件中访问 <code>this.$store property</code>，你需要为 Vue 实例提供创建好的 store。Vuex 提供了一个从根组件向所有子组件，以 store 选项的方式&quot;注入&quot;该 store 的机制：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> Vue</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  el:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;#app&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">  store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以从组件的方法提交一个变更：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">methods: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">    this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">$store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">$store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次强调，我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化。这个简单的约定能够让你的意图更加明显，这样你在阅读代码的时候能更容易地解读应用内部的状态改变。此外，这样也让我们有机会去实现一些能记录每次状态改变，保存状态快照的调试工具。有了它，我们甚至可以实现如时间穿梭般的调试体验。</p><p>由于 store 中的状态是响应式的，在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。触发变化也仅仅是在组件的 methods 中提交 mutation。</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="state-单一状态树" tabindex="-1"><a class="header-anchor" href="#state-单一状态树"><span>State - 单一状态树</span></a></h3><p>单一状态树：&quot;唯一数据源 (SSOT (Single source of truth))&quot;</p><p>每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><h4 id="mapstate-辅助函数" tabindex="-1"><a class="header-anchor" href="#mapstate-辅助函数"><span>mapState 辅助函数</span></a></h4><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> default</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  computed:</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 箭头函数可使代码更简练</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    count</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 传字符串参数 &#39;count&#39; 等同于 \`state =&gt; state.count\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    countAlias:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;count&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 为了能够使用 \`this\` 获取局部状态，必须使用常规函数</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    countPlusLocalState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">localCount</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">computed: </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // 映射 this.count 为 store.state.count</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">  &#39;count&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters"><span>Getters</span></a></h3><p>Vuex 允许我们在 store 中定义&quot;getter&quot;（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  state:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    todos:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> [</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      { </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">id:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">text:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;...&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      { </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">id:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">text:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;...&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    ],</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    doneTodos</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">todos</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">filter</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">todo</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> todo</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">done</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过属性访问" tabindex="-1"><a class="header-anchor" href="#通过属性访问"><span>通过属性访问</span></a></h4><p>Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">doneTodos</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; [{ id: 1, text: &#39;...&#39;, done: true }]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Getter 也可以接受其他 getter 作为第二个参数：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">getters: {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  doneTodosCount: (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">doneTodos</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  };</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">doneTodosCount</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以很容易地在任何组件中使用它：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">computed: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  doneTodosCount</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">$store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">doneTodosCount</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p><h4 id="通过方法访问" tabindex="-1"><a class="header-anchor" href="#通过方法访问"><span>通过方法访问</span></a></h4><p>也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">getters: {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  getTodoById: (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">id</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">todos</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">find</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">todo</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> todo</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">id</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ===</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> id</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  };</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getTodoById</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; { id: 2, text: &#39;...&#39;, done: false }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mapgetters-辅助函数" tabindex="-1"><a class="header-anchor" href="#mapgetters-辅助函数"><span>mapGetters 辅助函数</span></a></h4><p>mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> default</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  computed:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 使用对象展开运算符将 getter 混入 computed 对象中</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;doneTodosCount&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;anotherGetter&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // 把 \`this.doneCount\` 映射为 \`this.$store.getters.doneTodosCount\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  doneCount:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;doneTodosCount&#39;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mutation" tabindex="-1"><a class="header-anchor" href="#mutation"><span>Mutation</span></a></h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  state:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    count:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 变更状态</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：&quot;当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。&quot;要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="提交载荷-payload" tabindex="-1"><a class="header-anchor" href="#提交载荷-payload"><span>提交载荷（Payload）</span></a></h4><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">mutations: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">n</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> n</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">mutations: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">amount</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  amount:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象风格的提交方式" tabindex="-1"><a class="header-anchor" href="#对象风格的提交方式"><span>对象风格的提交方式</span></a></h4><p>提交 mutation 的另一种方式是直接使用包含 <code>type</code> 属性的对象：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  type:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  amount:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">mutations: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">amount</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mutation-需遵守-vue-的响应规则" tabindex="-1"><a class="header-anchor" href="#mutation-需遵守-vue-的响应规则"><span>Mutation 需遵守 Vue 的响应规则</span></a></h4><p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><ol><li><p>最好提前在你的 store 中初始化好所有所需属性。</p></li><li><p>当需要在对象上修改属性时（添加、删除）</p><ul><li>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code> 添加属性, 或者使用 <code>Vue.delete(obj, &#39;prop&#39;)</code> 删除属性</li><li>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写：</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">obj</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">obj</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">newProp:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 123</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h4 id="使用常量替代-mutation-事件类型" tabindex="-1"><a class="header-anchor" href="#使用常量替代-mutation-事件类型"><span>使用常量替代 Mutation 事件类型</span></a></h4><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// mutation-types.js</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> SOME_MUTATION</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;SOME_MUTATION&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// store.js</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">SOME_MUTATION</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;./mutation-types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  state:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    [</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">SOME_MUTATION</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">] (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // mutate state</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。</p><h4 id="mutation-必须是同步函数" tabindex="-1"><a class="header-anchor" href="#mutation-必须是同步函数"><span>Mutation 必须是同步函数</span></a></h4><p>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong>。为什么？请参考下面的例子：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">mutations: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  someMutation</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    api</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">callAsyncMethod</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(() </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><h4 id="在组件中提交-mutation" tabindex="-1"><a class="header-anchor" href="#在组件中提交-mutation"><span>在组件中提交 Mutation</span></a></h4><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapMutations</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> default</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  methods:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapMutations</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.increment()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // \`mapMutations\` 也支持载荷：</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;incrementBy&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.incrementBy(amount)\` 映射为 \`this.$store.commit(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapMutations</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      add:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.add()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="action" tabindex="-1"><a class="header-anchor" href="#action"><span>Action</span></a></h3><p>在 mutation 中混合异步调用会导致程序很难调试。例如，当你调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，<strong>mutation 都是同步事务</strong>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 任何由 &quot;increment&quot; 导致的状态变更都应该在此刻完成。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>一个简单的 action：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  state:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    count:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  actions:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p><blockquote><p>可以使用 ES2015 的参数解构来简化代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="分发-action" tabindex="-1"><a class="header-anchor" href="#分发-action"><span>分发 Action</span></a></h4><p>Action 通过 <code>store.dispatch</code> 方法触发：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>乍一眼看上去感觉多此一举，我们直接分发 mutation 岂不更方便？实际上并非如此，还记得 <strong>mutation 必须同步执行</strong>这个限制么？Action 就不受约束！我们可以在 action 内部执行异步操作：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  incrementAsync</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    setTimeout</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(() </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">1000</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Actions 支持同样的载荷方式和对象方式进行分发：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 以载荷形式分发</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;incrementAsync&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  amount:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 以对象形式分发</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  type:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;incrementAsync&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  amount:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 10</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一个更加实际的购物车示例，涉及到<strong>调用异步 API 和分发多重 mutation</strong>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  checkout</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">products</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 把当前购物车的物品备份起来</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">    const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> savedCartItems</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> [</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">cart</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">added</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">]</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 发出结账请求，然后乐观地清空购物车</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">types</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">CHECKOUT_REQUEST</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 购物 API 接受一个成功回调和一个失败回调</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    shop</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">buyProducts</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      products</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 成功操作</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">types</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">CHECKOUT_SUCCESS</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">),</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 失败操作</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">types</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">CHECKOUT_FAILURE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">savedCartItems</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    )</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们正在进行一系列的异步操作，并且通过提交 mutation 来记录 action 产生的副作用（即状态变更）。</p><h4 id="在组件中分发-action" tabindex="-1"><a class="header-anchor" href="#在组件中分发-action"><span>在组件中分发 Action</span></a></h4><p>你在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> default</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  methods:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.increment()\` 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // \`mapActions\` 也支持载荷：</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">      &#39;incrementBy&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.incrementBy(amount)\` 映射为 \`this.$store.dispatch(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      add:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 将 \`this.add()\` 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组合-action" tabindex="-1"><a class="header-anchor" href="#组合-action"><span>组合 Action</span></a></h4><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  actionA</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#DC3EB7;--shiki-dark:#4EC9B0;"> Promise</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">resolve</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">reject</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      setTimeout</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(() </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someMutation&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        resolve</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      }, </span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">1000</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;actionA&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">then</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(() </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在另外一个 action 中也可以：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  actionB</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;actionA&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">then</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(() </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someOtherMutation&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，如果我们利用 <code>async / await</code>，我们可以如下组合 action：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">actions: {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">  async</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> actionA</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;gotData&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">await</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getData</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">())</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">  async</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> actionB</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    await</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;actionA&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 等待 actionA 完成</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;gotOtherData&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">await</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getOtherData</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">())</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p></blockquote><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>Module</span></a></h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  actions:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleB</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  actions:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  modules:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    a:</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleA</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    b:</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleB</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; moduleA 的状态</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">b</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; moduleB 的状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模块的局部状态" tabindex="-1"><a class="header-anchor" href="#模块的局部状态"><span>模块的局部状态</span></a></h4><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    count:</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    increment</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 这里的 \`state\` 对象是模块的局部状态</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    doubleCount</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  actions:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    incrementIfOddOnRootSum</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({ </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">rootState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ((</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> rootState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">%</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ===</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;increment&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> moduleA</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    sumWithRootCount</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">rootState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> rootState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">count</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h4><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  modules:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    account:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      namespaced:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 模块内容（module assets）</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }), </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 模块内的状态已经是嵌套的了，使用 \`namespaced\` 属性不会对其产生影响</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        isAdmin</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; getters[&#39;account/isAdmin&#39;]</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      actions:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        login</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; dispatch(&#39;account/login&#39;)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      mutations:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        login</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; commit(&#39;account/login&#39;)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 嵌套模块</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">      modules:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 继承父模块的命名空间</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">        myPage:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">          state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">          getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            profile</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; getters[&#39;account/profile&#39;]</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">          }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 进一步嵌套命名空间</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">        posts:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">          namespaced:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">          state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">          getters:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            popular</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; getters[&#39;account/posts/popular&#39;]</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">          }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用了命名空间的 getter 和 action 会收到局部化的 <code>getter</code>，<code>dispatch</code> 和 <code>commit</code>。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。更改 <code>namespaced</code> 属性后不需要修改模块内的代码。</p><h4 id="在带命名空间的模块内访问全局内容-global-assets" tabindex="-1"><a class="header-anchor" href="#在带命名空间的模块内访问全局内容-global-assets"><span>在带命名空间的模块内访问全局内容（Global Assets）</span></a></h4><p>如果你希望使用全局 state 和 getter，<code>rootState</code> 和 <code>rootGetters</code> 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。</p><p>若需要在全局命名空间内分发 action 或提交 mutation，将 <code>{ root: true }</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">modules: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  foo: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    namespaced: </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    getters: {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 在这个模块的 getter 中，\`getters\` 被局部化了</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 你可以使用 getter 的第四个参数来调用 \`rootGetters\`</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      someGetter</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">rootState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">rootGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">someOtherGetter</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; &#39;foo/someOtherGetter&#39;</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        rootGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">someOtherGetter</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; &#39;someOtherGetter&#39;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      someOtherGetter: </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    actions: {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 在这个模块中， dispatch 和 commit 也被局部化了</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      // 他们可以接受 \`root\` 属性以访问根 dispatch 或 commit</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      someAction</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({ </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">rootGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        getters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">someGetter</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; &#39;foo/someGetter&#39;</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        rootGetters</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">someGetter</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; &#39;someGetter&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someOtherAction&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; &#39;foo/someOtherAction&#39;</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someOtherAction&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, { </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">root:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; &#39;someOtherAction&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someMutation&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; &#39;foo/someMutation&#39;</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        commit</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someMutation&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, { </span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">root:</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }) </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; &#39;someMutation&#39;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      },</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      someOtherAction</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">ctx</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在带命名空间的模块注册全局-action" tabindex="-1"><a class="header-anchor" href="#在带命名空间的模块注册全局-action"><span>在带命名空间的模块注册全局 action</span></a></h4><p>若需要在带命名空间的模块注册全局 action，你可添加 <code>root: true</code>，并将这个 action 的定义放在函数 <code>handler</code> 中。例如：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    someOtherAction</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;someAction&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  modules: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    foo: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      namespaced: </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      actions: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        someAction: {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">          root: </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">          handler</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">namespacedContext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">payload</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) { </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">...</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; &#39;someAction&#39;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带命名空间的绑定函数" tabindex="-1"><a class="header-anchor" href="#带命名空间的绑定函数"><span>带命名空间的绑定函数</span></a></h4><p>当使用 <code>mapState</code>, <code>mapGetters</code>, <code>mapActions</code> 和 <code>mapMutations</code> 这些函数来绑定带命名空间的模块时，写起来可能比较繁琐：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">computed: {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">  ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    a</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">some</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">nested</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">module</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    b</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">some</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">nested</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">module</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">b</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">},</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">methods: {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">  ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">    &#39;some/nested/module/foo&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; this[&#39;some/nested/module/foo&#39;]()</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">    &#39;some/nested/module/bar&#39;</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; this[&#39;some/nested/module/bar&#39;]()</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  ])</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种情况，你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文。于是上面的例子可以简化为：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">computed: {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">  ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;some/nested/module&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    a</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">    b</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">b</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">},</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">methods: {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">  ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;some/nested/module&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, [</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">    &#39;foo&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// -&gt; this.foo()</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">    &#39;bar&#39;</span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> // -&gt; this.bar()</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  ])</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且，你可以通过使用 <code>createNamespacedHelpers</code> 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">createNamespacedHelpers</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createNamespacedHelpers</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;some/nested/module&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> default</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  computed:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 在 \`some/nested/module\` 中查找</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapState</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      a</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">      b</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> state</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">b</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">  methods:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 在 \`some/nested/module\` 中查找</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">    ...</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">mapActions</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;foo&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;bar&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">]),</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  },</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给插件开发者的注意事项" tabindex="-1"><a class="header-anchor" href="#给插件开发者的注意事项"><span>给插件开发者的注意事项</span></a></h4><p>如果你开发的插件（Plugin）提供了模块并允许用户将其添加到 Vuex store，可能需要考虑模块的空间名称问题。对于这种情况，你可以通过插件的参数对象来允许用户指定空间名称：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 通过插件的参数对象得到空间名称</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 然后返回 Vuex 插件函数</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">export</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> function</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createPlugin</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">options</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;"> function</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 把空间名字添加到插件模块的类型（type）中去</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">    const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> namespace</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> options</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">namespace</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">dispatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">namespace</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;pluginAction&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  };</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模块动态注册" tabindex="-1"><a class="header-anchor" href="#模块动态注册"><span>模块动态注册</span></a></h4><p>在 store 创建之后，你可以使用 <code>store.registerModule</code> 方法注册模块：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">import</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> from</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;vuex&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> store</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> Vuex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">Store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">({</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /* 选项 */</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 注册模块 \`myModule\`</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">registerModule</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;myModule&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 注册嵌套模块 \`nested/myModule\`</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">store</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">registerModule</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">([</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;nested&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&#39;myModule&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">], {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以通过 <code>store.state.myModule</code> 和 <code>store.state.nested.myModule</code> 访问模块的状态。</p><p>模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态。例如，<code>vuex-router-sync</code> 插件就是通过动态注册模块将 vue-router 和 vuex 结合在一起，实现应用的路由状态管理。</p><p>你也可以使用 <code>store.unregisterModule(moduleName)</code> 来动态卸载模块。注意，你不能使用此方法卸载静态模块（即创建 store 时声明的模块）。</p><p>注意，你可以通过 <code>store.hasModule(moduleName)</code> 方法检查该模块是否已经被注册到 store。</p><h4 id="保留-state" tabindex="-1"><a class="header-anchor" href="#保留-state"><span>保留 state</span></a></h4><p>在注册一个新 module 时，你很有可能想保留过去的 state，例如从一个服务端渲染的应用保留 state。你可以通过 <code>preserveState</code> 选项将其归档：<code>store.registerModule(&#39;a&#39;, module, { preserveState: true })</code>。</p><p>当你设置 <code>preserveState: true</code> 时，该模块会被注册，action、mutation 和 getter 会被添加到 store 中，但是 state 不会。这里假设 store 的 state 已经包含了这个 module 的 state 并且你不希望将其覆写。</p><h4 id="模块重用" tabindex="-1"><a class="header-anchor" href="#模块重用"><span>模块重用</span></a></h4><p>有时我们可能需要创建一个模块的多个实例，例如：</p><ul><li>创建多个 store，他们公用同一个模块 (例如当 <code>runInNewContext</code> 选项是 <code>false</code> 或 <code>&#39;once&#39;</code> 时，为了在服务端渲染中避免有状态的单例 )</li><li>在一个 store 中多次注册同一个模块<br> 如果我们使用一个纯对象来声明模块的状态，那么这个状态对象会通过引用被共享，导致状态对象被修改时 store 或模块间数据互相污染的问题。</li></ul><p>实际上这和 Vue 组件内的 <code>data</code> 是同样的问题。因此解决办法也是相同的——使用一个函数来声明模块状态（仅 2.3.0+ 支持）：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> MyReusableModule</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  state</span><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ({</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#9CDCFE;">    foo:</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &#39;bar&#39;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }),</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // mutation, action 和 getter 等等...</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,186),t=[e];function h(k,p){return a(),i("div",null,t)}const E=s(l,[["render",h],["__file","Vuex.html.vue"]]),g=JSON.parse(`{"path":"/docs/note/front-end/Vue2/Vuex.html","title":"状态管理模式","lang":"zh-CN","frontmatter":{"title":"状态管理模式","date":"2021-08-31T00:00:00.000Z","description":"Vuex 是什么 Vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。 状态管理又是什...","head":[["meta",{"property":"og:url","content":"https://blog.white233.top/docs/note/front-end/Vue2/Vuex.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"状态管理模式"}],["meta",{"property":"og:description","content":"Vuex 是什么 Vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。 状态管理又是什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuex.vuejs.org/vuex.png 'Vuex'"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T09:12:43.000Z"}],["meta",{"property":"article:author","content":"White"}],["meta",{"property":"article:published_time","content":"2021-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T09:12:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态管理模式\\",\\"image\\":[\\"https://vuex.vuejs.org/vuex.png 'Vuex'\\"],\\"datePublished\\":\\"2021-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-07T09:12:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"White\\",\\"url\\":\\"https://blog.white233.top\\",\\"email\\":\\"white996@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Vuex 是什么","slug":"vuex-是什么","link":"#vuex-是什么","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"直接下载 / CDN 引用","slug":"直接下载-cdn-引用","link":"#直接下载-cdn-引用","children":[]},{"level":3,"title":"NPM","slug":"npm","link":"#npm","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"最简单的 Store","slug":"最简单的-store","link":"#最简单的-store","children":[]}]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"State - 单一状态树","slug":"state-单一状态树","link":"#state-单一状态树","children":[]},{"level":3,"title":"Getters","slug":"getters","link":"#getters","children":[]},{"level":3,"title":"Mutation","slug":"mutation","link":"#mutation","children":[]},{"level":3,"title":"Action","slug":"action","link":"#action","children":[]},{"level":3,"title":"Module","slug":"module","link":"#module","children":[]}]}],"git":{"createdTime":1630338153000,"updatedTime":1717751563000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":2}]},"readingTime":{"minutes":18.89,"words":5668},"filePathRelative":"docs/note/front-end/Vue2/Vuex.md","localizedDate":"2021年8月31日","excerpt":"<h2>Vuex 是什么</h2>\\n<p>Vuex 是一个专门为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式存储管理</strong>应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具<a href=\\"https://github.com/vuejs/vue-devtools\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>","autoDesc":true}`);export{E as comp,g as data};
