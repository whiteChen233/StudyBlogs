import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,d as i,o as e,r as h}from"./app-De7shokQ.js";const t="/assets/note/be/container-magic.png",k="/assets/note/be/dynamic-proxy.jpeg",p={},d=i('<h2 id="spring-bean" tabindex="-1"><a class="header-anchor" href="#spring-bean"><span>Spring Bean</span></a></h2><h3 id="什么是-spring-bean" tabindex="-1"><a class="header-anchor" href="#什么是-spring-bean"><span>什么是 Spring Bean</span></a></h3><p>简单来说, Bean 指代的就是那些被 IoC 容器所管理的对象</p><figure><img src="'+t+`" alt="IoC 容器" tabindex="0" loading="lazy"><figcaption>IoC 容器</figcaption></figure><p>应用程序类（POJO）与配置元数据相结合, 在创建和初始化 ApplicationContext 后, 就拥有了一个完全配置和可执行的系统或应用程序</p><blockquote><p>配置元数据可以是 XML 文件、注解或者 Java 配置类</p></blockquote><h3 id="如何声明一个-bean" tabindex="-1"><a class="header-anchor" href="#如何声明一个-bean"><span>如何声明一个 Bean</span></a></h3><p>注解声明:</p><ul><li><code>@Component</code>: 通用的注解, 可标记任意类为 Spring 组件, 下面是它的一些细分 <ul><li><code>@Repository</code>: 持久层, 主要用于数据库相关操作</li><li><code>@Service</code>: 服务层, 主要设计一些负载的逻辑</li><li><code>@Controller</code>: MVC 的控制层, 用于接受用户请求并调用 <code>Service</code> 层返回数据给前端页面</li></ul></li></ul><p>Java Config 配置声明:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> AppConfig</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> UserService</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> userService</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> UserServiceImpl</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>XML 配置声明:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">  &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">      &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">bean</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> id</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;com.demo.User&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">  &lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">@Component 和 @Bean 的区别</p><table><thead><tr><th><code>@Component</code></th><th><code>@Bean</code></th></tr></thead><tbody><tr><td>作用于类</td><td>作用于方法</td></tr><tr><td>通常类路径扫描来自动侦测以及自动装配到 Spring 容器中, 搭配 <code>@ComponentScan</code>使用</td><td>标记该方法返回的是一个 Spring Bean 对象, 搭配 <code>@Configuration</code> 使用</td></tr><tr><td>只能单纯的声明, 非常有限自定义</td><td>自定义更强, 支持将第三方类变成组件</td></tr></tbody></table></div><h3 id="bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#bean-的生命周期"><span>Bean 的生命周期</span></a></h3><ul><li>Bean 容器找配置元数据中的 Spring Bean 定义</li><li>Bean 容器利用 Java Reflection API 创建一个 Bean 实例</li><li>如果涉及到一些属性值, 那么通过 <code>set()</code> 方法设置一些属性值</li><li>检查 <code>Aware</code> 的相关接口并设置相关依赖 <ul><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口, 调用 <code>setBeanName()</code> 方法传入 Bean 的名字</li><li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口, 调用 <code>setClassLoader()</code> 方法传入 ClassLoader 对象的实例</li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口, 调用 <code>setBeanFactory()</code> 方法传入 BeanFactory 对象的实例</li><li>如果 Bean 还实现了其他 <code>*Aware</code> 接口, 就调用相应的方法</li></ul></li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象, 执行 <code>postProcessBeforeInitialization()</code> 方法</li><li>如果 Bean 实现了 <code>InitializingBean</code> 接口, 执行 <code>afterPropertiesSet()</code> 方法</li><li>如果 Bean 在配置元数据中定义了 <code>init-method</code> 属性, 执行指定的方法</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象, 执行 <code>postProcessAfterInitialization()</code> 方法</li><li>当要销毁 Bean 的时候, 如果 Bean 实现了 <code>DisposableBean</code> 接口, 执行 <code>destroy()</code> 方法</li><li>当要销毁 Bean 的时候, 如果 Bean 在配置元数据中定义了 <code>destroy-method</code> 属性, 执行指定的方法</li></ul><blockquote><p>xml 中的 <code>init-method</code>、<code>destroy-method</code> 分别对应注解 <code>@PostConstruct</code> 和 <code>@PreDestroy</code></p></blockquote><p>可以简单理解成下面几个流程:</p>`,18),r=i(`<blockquote><p>实例化和初始化</p><ul><li>实例化: 在内存中申请空间</li><li>初始化: 属性赋值</li></ul></blockquote><h4 id="beandefinition" tabindex="-1"><a class="header-anchor" href="#beandefinition"><span>BeanDefinition</span></a></h4><p>Spring IoC 容器管理一个或多个 Bean, 这些 Bean 是我们供给容器的配置元数据创建的, 在容器本身中, 这些 Bean 定义表示为 <code>BeanDefinition</code> 对象</p><p>元数据是为了转换构成每个 Bean 定义的一组属性, 如下所示:</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>Class</td><td>实例化 Bean</td></tr><tr><td>Name</td><td>命名 Bean</td></tr><tr><td>Scope</td><td>Bean 范围</td></tr><tr><td>Constructor arguments</td><td>构造方法依赖注入</td></tr><tr><td>Properties</td><td>属性依赖注入</td></tr><tr><td>Autowring mode</td><td>自动装配</td></tr><tr><td>Lazy initialization mode</td><td>延迟初始化 Bean</td></tr><tr><td>Initialization method</td><td>初始化的回调函数</td></tr><tr><td>Destruction method</td><td>销毁的回调函数</td></tr></tbody></table><p>而 <code>BeanDefinitionReader</code> 接口则约束了如何读取这些 <code>BeanDefinition</code> 对象, 通过不同的子类实现来读取不同的配置文件信息, 生成 <code>BeanDefinition</code> 对象, 最终所有的 <code>BeanDefinition</code> 对象都会交由 <code>BeanDefinitionRegistry</code> 统一管理</p><h4 id="postprocessor" tabindex="-1"><a class="header-anchor" href="#postprocessor"><span>*PostProcessor</span></a></h4><p>后置处理器(增强器): 提供某些额外的扩展功能</p><ul><li>BeanPostProcessor: 操作对象是 BeanFactory</li><li>BeanFactoryPostProcessor: 操作对象是 Bean</li></ul><h2 id="ioc-容器" tabindex="-1"><a class="header-anchor" href="#ioc-容器"><span>IoC 容器</span></a></h2><p>IOC, 即Inversion of Control, 中文翻译为“控制反转”. 它是面向对象编程中的一种设计原则, 可以用来降低代码之间的耦合度. 在传统的编程方式中, 我们直接在对象内部通过new进行创建对象, 这种方式会造成对象与对象之间的高耦合度, 不利于代码的维护和扩展. 而控制反转就是将原本由代码直接操控的对象的调用权交给第三方（例如一个容器）来控制, 以解耦代码, 提高程序的可扩展性和可维护性</p><p>IoC 是 Spring 框架的各个功能模块的基础, 是创建和管理对象的容器</p><h3 id="beanfactory" tabindex="-1"><a class="header-anchor" href="#beanfactory"><span>BeanFactory</span></a></h3><p>BeanFactory 是 Spring 框架中的一个核心接口, 用于管理和维护 Bean 的定义、创建以及生命周期. 它是 Spring IoC（控制反转）容器的基础, 负责从配置文件或者注解中读取 Bean 的定义信息, 并根据需要创建相应的 Bean 实例</p><p>BeanFactory 的主要职责包括:</p><ul><li>解析配置文件, 读取 Bean 的定义信息</li><li>实例化 Bean, 处理依赖注入</li><li>管理 Bean 的作用域和生命周期</li></ul><p>BeanFactory 的源码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> BeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> FACTORY_BEAN_PREFIX</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &quot;&amp;&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">... </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">... </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ObjectProvider</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBeanProvider</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    &lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ObjectProvider</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBeanProvider</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ResolvableType</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> containsBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isPrototype</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isTypeMatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ResolvableType</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isTypeMatch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getType</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getType</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">boolean</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var2</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> NoSuchBeanDefinitionException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getAliases</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> var1</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beanfactory-和-applicationcontext-的区别" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext-的区别"><span>BeanFactory 和 ApplicationContext 的区别</span></a></h4><p>ApplicationContext 是 BeanFactory 的子接口, 所以它具备 BeanFactory 的所有功能, 另外它还提供了更多面向企业的特定功能, 包括解析消息、支持国际化、发布事件以及应用层特定的上下文</p><p>ApplicationContext 的源码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> ApplicationContext</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> extends</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    EnvironmentCapable</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    ListableBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    HierarchicalBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    MessageSource</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    ApplicationEventPublisher</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">,</span></span>
<span class="line"><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;">    ResourcePatternResolver</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getId</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getApplicationName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getDisplayName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    long</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getStartupDate</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    ApplicationContext</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getParent</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    AutowireCapableBeanFactory</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getAutowireCapableBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> IllegalStateException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同点:</p><ul><li>加载策略: <code>Beanfactory</code> 采用延迟加载策略, 只有在需要时才会实例化; <code>ApplicationContext</code> 在容器启动的过程中就完成了 Bean 的实例化</li><li>功能扩展: <code>BeanFactory</code> 是底层的IoC容器, 只有一些基本的操作, 而 <code>ApplicationContext</code> 在 <code>BeanFactory</code> 的基础上提供了更多的功能: 国际化、事件传播、AOP 代理等等</li><li>性能: <code>ApplicationContext</code> 会预先实例化 Bean, 因此在启动的时候会有其他的性能开销; 相比之下, <code>BeanFactory</code> 的性能更好, 因为它在使用时才实例化</li></ul><div class="hint-container tip"><p class="hint-container-title">BeanFactory 和 ApplicationContext 是如何创建容器的</p><p>首先定义一个 <code>beans.xml</code>, 如下:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;?</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">xml</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> version</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;1.0&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> encoding</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;UTF-8&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> xmlns</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    xmlns:xsi</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    xsi:schemaLocation</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">bean</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> id</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;t&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;com.demo.Test&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">        &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">property</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> name</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;name&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;test&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">    &lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>BeanFactory</code> 的方式加载:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> App</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        BeanFactory</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> factory</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> XmlBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ClassPathResource</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;beans.xml&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">factory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;t&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">))</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ApplicationContext</code> 的方式加载:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> App</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ApplicationContext</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> context</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;beans.xml&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;t&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">))</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="beanfactory-和-factorybean-的区别" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-factorybean-的区别"><span>BeanFactory 和 FactoryBean 的区别</span></a></h4><p>FactoryBean 是一个接口, 允许开发者创建定制化的Bean创建逻辑. 通过实现 FactoryBean 接口, 开发者可以控制 Bean 的创建过程, 从而实现更加灵活和复杂的 Bean 实例化</p><p>FactoryBean 的源码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> FactoryBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> OBJECT_TYPE_ATTRIBUTE</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &quot;factoryBeanObjectType&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    T</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getObject</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Exception</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getObjectType</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> boolean</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同点:</p><ul><li>功能不同: BeanFactory 负责管理和创建 Bean, 而 FactoryBean 是一个接口, 允许开发者实现定制化的 Bean 创建逻辑</li><li>角色不同: BeanFactory 是 Spring 框架的核心, 负责整个 Bean 的管理; 而 FactoryBean 是 Bean 的创建方式之一, 用于定制化的 Bean 实例化</li><li>使用方式不同: BeanFactory 通常通过配置文件或者注解来实现 Bean 的管理和创建; 而 FactoryBean 需要开发者实现自定义的工厂类, 提供定制化的 Bean 创建逻辑</li></ul><h3 id="创建-ioc-容器的方式" tabindex="-1"><a class="header-anchor" href="#创建-ioc-容器的方式"><span>创建 IoC 容器的方式</span></a></h3><p>有两种, 基于 XML 的方式和基于注解的方式</p><p>假设有如下的配置类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Data</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> AppConfig</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> username</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> password</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>基于 XML 的方式配置和使用</p><p>在项目中的 resources 下创建一个 <code>applicationContext.xml</code> 的配置文件, 内容如下:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;?</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">xml</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> version</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;1.0&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> encoding</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;UTF-8&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> xmlns</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    xmlns:xsi</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    xsi:schemaLocation</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">bean</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> id</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;config&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;com.demo.AppConfig&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#808080;">        &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">property</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> name</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;username&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#808080;">        &lt;</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">property</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> name</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;password&quot;</span><span style="--shiki-light:#DF8618;--shiki-dark:#9CDCFE;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">=</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#808080;">    &lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#0444AC;--shiki-dark:#569CD6;">beans</span><span style="--shiki-light:#002339;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在代码中使用 XML 的方式获取 AppConfig 对象</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Test</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ApplicationContext</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> context</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line highlighted"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;applicationContext.xml&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;config&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基于注解的方式配置与使用</p><ul><li><p>配置类: 通过一个 Java 类来替代 XML 文件, 把在 XML 中配置的内容放到配置类中</p><p>首先创建一个配置类, 如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> AppConfiguration</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> AppConfig</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> config</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        AppConfig</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> config</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> AppConfig</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        config</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">setUsername</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        config</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">setPasswrod</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> config;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在代码中使用如下的方式获取 AppConfig 对象:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Test</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ApplicationContext</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> context</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line highlighted"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> AnnotationConfigApplicationContext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Configuration</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;config&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>扫包 + 注解</p><p>更简单的方式, 既不需要依赖于 XML 文件也不需要配置类, 而是直接将 Bean 的创建交给目标类, 仅需要在目标类添加注解就能实现:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Data</span></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Component</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> AppConfig</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> username</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Value</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;root&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> password</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候跟注解方式是类似的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> Test</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ApplicationContext</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> context</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line highlighted"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> AnnotationConfigApplicationContext</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;com.demo&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        System</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">context</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;config&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="ioc-容器的创建过程" tabindex="-1"><a class="header-anchor" href="#ioc-容器的创建过程"><span>IoC 容器的创建过程</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> refresh</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    synchronized</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">startupShutdownMonitor</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 准备刷新上下文</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        prepareRefresh</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 获取初始化 BeanFactory</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        ConfigurableListableBeanFactory</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> beanFactory</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> obtainFreshBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 对 BeanFactory 设置属性</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        prepareBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        try</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 模版方法, 允许子类注册特殊的 BeanPostProcess 等</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            postProcessBeanFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 调用 Bean 的后置处理器</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            invokeBeanFactoryPostProcessors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 注册 Bean 的后置处理器</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            registerBeanPostProcessors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 初始化国际化资源处理器</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            initMessageSource</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 初始化事件多播器</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            initApplicationEventMulticaster</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 模版方法, 留给子类实现</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            onRefresh</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 注册事件监听器</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            registerListeners</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 实例化剩余的非懒加载的单实例 Bean</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            finishBeanFactoryInitialization</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 刷新容器, 发布刷新事件</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            finishRefresh</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">catch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">BeansException</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> ex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">logger</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isWarnEnabled</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                logger</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">warn</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Exception encountered during context initialization - &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                        &quot;cancelling refresh attempt: &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ex);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            destroyBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            cancelRefresh</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Propagate exception to caller.</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">finally</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            resetCommonCaches</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aop-代理" tabindex="-1"><a class="header-anchor" href="#aop-代理"><span>AOP 代理</span></a></h2><p>AOP, 即Aspect-Oriented Programming, 中文翻译为“面向切面编程”. 它是面向对象编程的一种补充, 用于处理一些具有横切性质的系统级服务, 如事务管理、日志、安全等. AOP通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术. AOP是OOP的延续, 是软件开发中的一个热点, 也是Spring框架中的一个重要内容, 是函数式编程的一种衍生范型. 利用AOP可以对业务逻辑的各个部分进行隔离, 从而使得业务逻辑各部分之间的耦合度降低, 提高程序的可重用性, 同时提高了开发的效率</p><p>AOP 也是以 IoC 为基础的, 它把切面这种抽象的概念也看成是对象, 变成了抽象化的面向对象</p><p>Spring AOP 是基于动态代理的, 如果要代理的对象实现了某个接口, 那么 Spring AOP 会使用 JDK Proxy 去创建代理对象, 而对于没有实现接口的对象, Spring AOP 就会使用 Cglib 生成一个被代理对象的子类来作为代理</p><figure><img src="`+k+`" alt="AOP 动态代理" tabindex="0" loading="lazy"><figcaption>AOP 动态代理</figcaption></figure><h3 id="aop-的一些术语" tabindex="-1"><a class="header-anchor" href="#aop-的一些术语"><span>AOP 的一些术语</span></a></h3><table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>Aspect（切面）</td><td>切入点(Pointcut)+通知(Advice)</td></tr><tr><td>JoinPoint（连接点）</td><td>目标对象的所属类中, 定义的所有方法均为连接点</td></tr><tr><td>Advice（通知）</td><td>增强的逻辑/代码, 也即拦截到目标对象的连接点之后要做的事情</td></tr><tr><td>PointCut（切点）</td><td>被切面拦截/增强的连接点（切入点一定是连接点, 连接点不一定是切入点）</td></tr><tr><td>Introduction（引入）</td><td>可以声明额外的方法或字段</td></tr><tr><td>TargetObject（目标对象）</td><td>被通知的对象</td></tr><tr><td>AOP Proxy（AOP代理）</td><td>向目标对象应用通知之后创建的代理对象</td></tr><tr><td>Weaving（织入）</td><td>将通知应用到目标对象,进而生成代理对象的过程动作</td></tr></tbody></table><p>在 <a href="https://docs.spring.io/spring-framework/docs/5.3.33-SNAPSHOT/reference/html/core.html#aop-introduction-defn" target="_blank" rel="noopener noreferrer">AOP Concepts</a> 可以查看更详细的介绍</p><h3 id="spring-aop-和-aspectj-aop-的区别" tabindex="-1"><a class="header-anchor" href="#spring-aop-和-aspectj-aop-的区别"><span>Spring AOP 和 AspectJ AOP 的区别</span></a></h3><ul><li>Spring AOP 属于运行时增强, 而 AspectJ 是编译时增强</li><li>Spring AOP 基于代理(Proxying), 而 AspectJ 基于字节码操作(Bytecode Manipulation)</li><li>Spring AOP 已经集成了 AspectJ , AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了</li><li>AspectJ 相比于 Spring AOP 功能更加强大, 但是 Spring AOP 相对来说更简单, 如果我们的切面比较少, 那么两者性能差异不. 但是, 当切面太多的话, 最好选择 AspectJ , 它比 Spring AOP 快很多</li></ul><div class="hint-container info"><p class="hint-container-title">AspectJ 的织入方式</p><ul><li>compile-time: 编译期织入, 织入对象是 .class 文件</li><li>post-compile: 后编译期织入, 织入对象是 class 字节码或者 jar 文件</li><li>load-time: 加载期织入, 在类加载进虚拟机之前织入</li></ul></div><p>Spring AOP 虽然使用 AspectJ 中的注解, 但是 Spring AOP 并不是用 AspectJ 实现的, Spring 只是借用了 AspectJ 的语法提供了一套基于动态代理的 AOP 实现, Spring 官方称其为 <code>@AspectJ style</code>, 受限于动态代理, Spring AOP 只支持方法级别的切面</p><h3 id="aop-通知的类型" tabindex="-1"><a class="header-anchor" href="#aop-通知的类型"><span>AOP 通知的类型</span></a></h3><ul><li><code>@Beafore</code>: 在切点之前执行</li><li><code>@After</code>: 在切点之后执行</li><li><code>@AfterReturing</code>: 在切点正常返回的时候执行</li><li><code>@AfterThrowing</code>: 在切点抛出异常的时候执行</li><li><code>@Around</code>: 环绕通知, 全程包裹</li></ul><h3 id="aop-的应用场景" tabindex="-1"><a class="header-anchor" href="#aop-的应用场景"><span>AOP 的应用场景</span></a></h3><ul><li>日志打印</li><li>事务处理</li><li>权限控制</li></ul><h2 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖"><span>循环依赖</span></a></h2><h3 id="什么是循环依赖" tabindex="-1"><a class="header-anchor" href="#什么是循环依赖"><span>什么是循环依赖</span></a></h3><p>在 Spring 中的循环依赖就是指一个或者多个 Bean 之间存在着互相依赖的关系, 并且形成了循环调用</p><p>举个简单的例子, 有两个对象定义如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Data</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> A</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> B</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> b</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Data</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> B</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> A</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> a</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下, Spring 的 Bean 都是单例的, 也就是有且仅有一个, 先来看一下这两个 bean 的创建流程:</p>`,60),E=i(`<p>因为 A B 的相互依赖关系, 导致创建对象的流程形成了闭环, 这就出现了循环依赖</p><h3 id="怎么解决循环依赖" tabindex="-1"><a class="header-anchor" href="#怎么解决循环依赖"><span>怎么解决循环依赖</span></a></h3><p>Spring 通过三级缓存和提前暴露对象的方式来解决循环依赖问题</p><p>先看一下三级缓存的定义:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> DefaultSingletonBeanRegistry</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> SimpleAliasRegistry</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> implements</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> SingletonBeanRegistry</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 一级缓存</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Map</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ConcurrentHashMap</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">256</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 二级缓存</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Map</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlySingletonObjects</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> ConcurrentHashMap</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">16</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 三级缓存</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    private</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Map</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ObjectFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonFactories</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> HashMap</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#174781;--shiki-dark:#B5CEA8;">16</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ObjectFactory: 是一个函数式接口, 有且只有一个方法 <code>getObject()</code>, 可以当做方法的参数传递. 在执行此类型参数的方法, 可以传入一个 Lambda 表达式, Lambda 表达式在声明的时候并不会执行, 而是在调用 <code>getObject()</code> 方法时才去调用 Lambda 处理的逻辑</p></blockquote><p>先把创建 Bean 的流程简单理解成如下方法的调用链: <code>getBean</code> -&gt; <code>doGetBean</code> -&gt; <code>createBean</code> -&gt; <code>doCreateBean</code> -&gt; <code>createBeanInstance</code> -&gt; <code>populateBean</code></p><blockquote><p>这里方法的命名其实挺有趣的, 可以说 <code>doxxx</code> 才是真正干活的</p></blockquote><p>Spring 从容器中获取需要实例化的所有 BeanDefinition 的名字列表后遍历, 先通过 <code>getBean</code> -&gt; <code>doGetBean</code> -&gt; <code>getSingleton</code> 从容器中尝试获取 Bean 对象, 如果获取到了那就继续处理下一个, 如果没获取到说明容器中还没有这个 Bean 对象, 那么就会调用 <code>createBean</code> -&gt; <code>doCreatBean</code> -&gt; <code>createBeanInstance</code> 方法去创建实例, 最后 <code>createBeanInstance</code> 会返回一个 Bean 实例(此时还是半成品, 属性都没有赋值)之后, 此时如果发现 Bean 需要提前暴露, 那么就会将其存入三级缓存, 然后再去调用 <code>populateBean</code> 来给 Bean 的属性赋值, 如果有依赖其他 Bean, Spring 容器会去找然后注入, 正常情况下这样就可以完成整个 Bean 的创建, 然后继续下一个</p><p>如果有循环依赖的 Bean, 比如上面说的 A、B, Spring 会怎么处理呢? 先停一下, 梳理一下执行到这里的时候三级缓存的情况(假设先创建 A, 不考虑其他 Bean 的影响):</p><ul><li>一级缓存: []</li><li>二级缓存: []</li><li>三级缓存: [(&quot;a&quot;, lambda)]</li></ul><p>在 <code>populateBean</code> 执行过程中会为 A 注入 B, 此时就会去容器里 <code>getBean</code>, 呀~ 套娃开始了, 因为 B 在容器中也不存在, 所以它的创建跟 A 是一样的, 直到执行创建 B 对象流程中的 <code>populateBean</code> 方法之前, OK, 这个时候再来看一下三级缓存的情况:</p><ul><li>一级缓存: []</li><li>二级缓存: []</li><li>三级缓存: [(&quot;a&quot;, lambda), (&quot;b&quot;, lambda)]</li></ul><p>执行创建 B 对象流程中的 <code>populateBean</code> 方法, 此时会给 B 的 a 属性赋值, 然后通过 <code>getBean</code> 从容器中尝试获取 A: 先找一级缓存 -&gt; 没有, 再找二级缓存 -&gt; 没有, 再找三级缓存 -&gt; 有, 在取出三级缓存中的对象时候, 会取执行 <code>ObjectFactory#getObject()</code> 方法, 其实就是 <code>() -&gt; getEarlyBeanReferance()</code> 这个 Lambda 表达式, 里面的方法简单说就是去判断 <code>BeanDefinition</code> 有没有实现 <code>SmartInstantiationAwareBeanPostProcessor</code> 接口, 而这个 PostProcessor 有一个子类就是 <code>AbstractAutoProxyCreator</code>, 没错如果 <code>BeanDefinition</code> 实现了创建代理对象, 如果需要那就返回代理对象, 不需要就返回源对象, 并且这个时候会从三级缓存中移除该对象, 然后将其放入二级缓存, 那么这个时候缓存的情况是:</p><ul><li>一级缓存: []</li><li>二级缓存: [(&quot;A&quot;, A(b=null))]</li><li>三级缓存: [(&quot;B&quot;, lambda)]</li></ul><p>这个时候 B 已经拿到它的属性 a 的 Bean 对象了, 容器注入后就完成了 B 的创建, 此时将 B 对象放入一级缓存, 清理二、三级缓存, 并返回 B 对象. 而此时缓存的情况是:</p><ul><li>一级缓存: [(&quot;b&quot;, B(a=A(b=null)))]</li><li>二级缓存: [(&quot;a&quot;, A(b=null))]</li><li>三级缓存: []</li></ul><p>这个时候回到创建 A 的流程中的 <code>populateBean</code> 方法, 将 B 注入 A 的 b 属性, 此时 A 也完成了创建, 然后将 A 对象放入一级缓存, 同时清理二、三级缓存. 而此时缓存的情况是:</p><ul><li>一级缓存: [(&quot;b&quot;, B(a=A(b=B(...)))), (&quot;a&quot;, A(b=B(a=A(...))))]</li><li>二级缓存: []</li><li>三级缓存: []</li></ul><p>然后继续执行下一个 Bean 的创建, 如果下一个是 B, 调用 <code>getBean</code> 发现已经创建完成了那就继续下一个, 依次类推</p><h4 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h4><p>先看一下大致的调用关系</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName) {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">  doGetBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName) {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    bean </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName)</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (bean </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">      if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">BD</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) { </span><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// BD: BeanDefinition</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">-&gt;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">          doCreateBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            BeanWrapper </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createBeanInstance</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 在执行 populateBean() 之前会把 bean 存入三级缓存(提前暴露对象)</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            populateBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(BeanWrapper)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">          }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        })</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">      }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是 <code>getBean</code> -&gt; <code>doGetBean</code> -&gt; <code>getSingleton()</code>, 用来获取容器中的 Bean 对象, <code>getSingleton()</code> 的逻辑是先从一级缓存获取, 没取到就去二级缓存取, 还没取到再去三级缓存取:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// allowEarlyReference = true</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">protected</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> allowEarlyReference) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 先从以及缓存获取 bean</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> singletonObject</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 没获取到再看当前 bean 是不是在创建过程中</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSingletonCurrentlyInCreation</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 如果在创建中就去二级缓存获取</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlySingletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 如果还没有获取到</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> allowEarlyReference) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 加锁</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">            synchronized</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 再从一级缓存取</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                    // 再从二级缓存取</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlySingletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                        // 最后到三级缓存取</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                        ObjectFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonFactory</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                            (ObjectFactory)</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonFactories</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (singletonFactory </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                            // 取到了三级缓存, 调用 ObjectFactory#getObject() 方法</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                            singletonObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> singletonFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getObject</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                            // 然后把生成的对象放到二级缓存</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">                            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlySingletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, singletonObject);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                            // 从三级缓存中删除</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">                            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonFactories</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> singletonObject;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 <code>getSingleton()</code> 方法中没有获取到 Bean 实例, 那就要去创建 Bean 了, 此时会依次判断要创建的 Bean 是不是单例、原型或其他, 这里只看单例的情况:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// 单例情况下这样实例化 Bean</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 这里的 getSingleton 方法参数列表是(String, ObjectFactory&lt;?&gt; singletonFactory)</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // getSingleton 里面还会设置当前 Bean 正在创建的标记</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    sharedInstance </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">-&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // getSingleton 里面会去添加当前类正在创建的标记, 去调用 ObjectFactory#getObject 来执行创建对象的流程, 也就是执行 createBean 方法</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        try</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        catch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">BeansException</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> ex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            destroySingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    });</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    bean </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getObjectForBeanInstance</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createBean()</code> 方法中会去调用真正创建对象的方法 <code>doCreateBean()</code>, 注意在 <code>createBeanInstance()</code> 和 <code>populateBean()</code> 之间有一段逻辑, 作用就是提前暴露对象的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">protected</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> doCreateBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">RootBeanDefinition</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> mbd, @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] args)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Instantiate the bean.</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    BeanWrapper</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> instanceWrapper</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        instanceWrapper </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">factoryBeanInstanceCache</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (instanceWrapper </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 实例化 Bean</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        instanceWrapper </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> createBeanInstance</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> bean</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> instanceWrapper</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getWrappedInstance</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">beanType</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> instanceWrapper</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getWrappedClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (beanType </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> NullBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">        mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">resolvedTargetType</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanType;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Allow post-processors to modify the merged bean definition.</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    synchronized</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">postProcessingLock</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">postProcessed</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            try</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">                applyMergedBeanDefinitionPostProcessors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(mbd, beanType, beanName);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            catch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Throwable</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> ex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> BeanCreationException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getResourceDescription</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName,</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                        &quot;Post-processing of merged bean definition failed&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">            mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">postProcessed</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Eagerly cache singletons to be able to resolve circular references</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    boolean</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> earlySingletonExposure</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">allowCircularReferences</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            isSingletonCurrentlyInCreation</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName));</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 条件是: Bean 是否是单例 &amp;&amp; 是否允许循环依赖 &amp;&amp; 当前 Bean 是否在创建过程中</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">logger</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isTraceEnabled</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                logger</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">trace</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Eagerly caching bean &#39;&quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                        &quot;&#39; to allow for resolving potential circular references&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 向三级缓存添加这个 Bean, 以便后续使用</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">            addSingletonFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, () </span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">-&gt;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getEarlyBeanReference</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, mbd, bean));</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Initialize the bean instance.</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> exposedObject</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    try</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 为属性赋值</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        populateBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, mbd, instanceWrapper);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /*</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 检查 Bean 是不是需要处理:</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 1. Aware 接口</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 2. BeanPostProcessor 接口中的 postProcessBeforeInitialization() 方法</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 3. InitializingBean 接口中的 afterPropertiesSet() 方法</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 4. init-method 指定的方法</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         * 5. BeanPostProcessor 接口中的 postProcessAfterInitialization() 方法</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">         */</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        exposedObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> initializeBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, exposedObject, mbd);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    catch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Throwable</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> ex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (ex </span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">instanceof</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> BeanCreationException </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> beanName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">equals</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(((BeanCreationException) ex).</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getBeanName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">())) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (BeanCreationException) ex;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> BeanCreationException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                    mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getResourceDescription</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName, </span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Initialization of bean failed&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // 如果是需要提前暴露</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 从容器中获取 Bean 对象, 注意这里是不允许去三级缓存获取的</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> earlySingletonReference</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getSingleton</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, </span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">false</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (earlySingletonReference </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 暴露的对象是不是当前对象</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (exposedObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">                // 把从容器中取到的对象覆盖掉当前对象(这里就是把代理对象覆盖原始对象的地方)</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                exposedObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> earlySingletonReference;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">allowRawInjectionDespiteWrapping</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hasDependentBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dependentBeans</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getDependentBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                Set</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">actualDependentBeans</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> LinkedHashSet</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;&gt;(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">dependentBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> dependentBean</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> dependentBeans) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">removeSingletonIfCreatedForTypeCheckOnly</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(dependentBean)) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                        actualDependentBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(dependentBean);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">actualDependentBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">                    throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> BeanCurrentlyInCreationException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName,</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                            &quot;Bean with name &#39;&quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;"> &quot;&#39; has been injected into other beans [&quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                            StringUtils</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">collectionToCommaDelimitedString</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(actualDependentBeans) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">+</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                            &quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                            &quot;wrapped. This means that said other beans do not use the final version of the &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                            &quot;bean. This is often the result of over-eager type matching - consider using &quot;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> +</span></span>
<span class="line"><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">                            &quot;&#39;getBeanNamesForType&#39; with the &#39;allowEagerInit&#39; flag turned off, for example.&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Register bean as disposable.</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    try</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">        registerDisposableBeanIfNecessary</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, bean, mbd);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    catch</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">BeanDefinitionValidationException</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> ex</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        throw</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> BeanCreationException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">                mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getResourceDescription</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName, </span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Invalid destruction signature&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> exposedObject;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看下 <code>addSingletonFactory()</code> 的逻辑, 很简单, 就是放入三级缓存:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">protected</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> addSingletonFactory</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">ObjectFactory</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> singletonFactory) {</span></span>
<span class="line"><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">    Assert</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">notNull</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(singletonFactory, </span><span style="--shiki-light:#A44185;--shiki-dark:#CE9178;">&quot;Singleton factory must not be null&quot;</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    synchronized</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        // 如果一级缓存不存在 bean</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">containsKey</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 把 bean 和回调函数存入三级缓存</span></span>
<span class="line highlighted"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">singletonFactories</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName, singletonFactory);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 从二级缓存移除</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlySingletonObjects</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">registeredSingletons</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在来看一下调用 <code>addSingletonFactory()</code> 的时候向其中传入的 Lambda 表达式 <code>() -&gt; getEarlyBeanReference()</code> 是怎么回事, 点击方法进去查看, 发现里面在判断是不是有 <code>SmartInstantiationAwareBeanPostProcessor</code> 的子类, 然后再去调用它的 <code>getEarlyBeanReference()</code> 方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">protected</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getEarlyBeanReference</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">RootBeanDefinition</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> mbd, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> exposedObject</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">mbd</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isSynthetic</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> hasInstantiationAwareBeanPostProcessors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        for</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">BeanPostProcessor</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> bp</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getBeanPostProcessors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (bp </span><span style="--shiki-light:#7B30D0;--shiki-dark:#569CD6;">instanceof</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> SmartInstantiationAwareBeanPostProcessor) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">                SmartInstantiationAwareBeanPostProcessor</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> ibp</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (SmartInstantiationAwareBeanPostProcessor) bp;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">                exposedObject </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> ibp</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getEarlyBeanReference</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(exposedObject, beanName);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">            }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> exposedObject;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再来看一下 <code>SmartInstantiationAwareBeanPostProcessor</code> 接口的定义, 主要看 <code>getEarlyBeanReference()</code> 方法, 可以看到它有默认实现, 也就是默认情况下是直接返回 Bean 不做任何处理的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> interface</span><span style="--shiki-light:#0444AC;--shiki-dark:#4EC9B0;"> SmartInstantiationAwareBeanPostProcessor</span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;"> extends</span><span style="--shiki-light:#B02767;--shiki-dark:#4EC9B0;"> InstantiationAwareBeanPostProcessor</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">predictBeanType</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">beanClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> beanName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    @</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Constructor</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt;[] </span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">determineCandidateConstructors</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Class</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#0991B6;--shiki-dark:#569CD6;">?</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;">beanClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> beanName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">            throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">    default</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getEarlyBeanReference</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#B1108E;--shiki-dark:#9CDCFE;"> beanName</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">throws</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> BeansException</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点来了, 通过查看 <code>SmartInstantiationAwareBeanPostProcessor</code> 的类关系, 发现它有一个子类 <code>AbstractAutoProxyCreator</code>, 而且重写了 <code>getEarlyBeanReference()</code> 方法(到这里基本上就已经很清晰了, 通过名字就可以判断这个类跟创建代理有关), 然后再看到其中的方法 <code>wrapIfNecessary()</code>, 这里的逻辑就是去判断 Bean 需不需要代理, 如果需要就会创建 Bean 的代理对象并返回, 否则就返回原来的 Bean</p><blockquote><p>暴露对象: 要么是原始对象, 要么是代理对象</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> getEarlyBeanReference</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">    Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> cacheKey</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getCacheKey</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName);</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /*</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 放入这个 map 是要告诉容器这个 Bean 已经执行过[是否需要创建 Bean 的代理对象]的逻辑,</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 因为这个逻辑原本是在 BeanPostProcessor#postProcessAfterInitialization 中执行的,</span></span>
<span class="line highlighted"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * 所以循环依赖中的 Bean 如果是需要代理的话会在这里生产代理对象, 在 BeanPostProcessor 中会直接跳过</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     */</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">    this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlyProxyReferences</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey, bean);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">wrapIfNecessary</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(bean, beanName, cacheKey);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">protected</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> wrapIfNecessary</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> cacheKey) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">StringUtils</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">hasLength</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">targetSourcedBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">FALSE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">equals</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">advisedBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey))) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">isInfrastructureClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">()) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> !</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">shouldSkip</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName)) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">specificInterceptors</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getAdvicesAndAdvisorsForBean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName, (TargetSource)</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (specificInterceptors </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> DO_NOT_PROXY) {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">advisedBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">TRUE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">            Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> proxy</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">createProxy</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName, specificInterceptors, </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> SingletonTargetSource</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(bean));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">proxyTypes</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">proxy</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">());</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> proxy;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">            this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">advisedBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">FALSE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">        this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">advisedBeans</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey, </span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">Boolean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">FALSE</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看一下 <code>AbstractAutoProxyCreator</code> 中实现的 <code>postProcessAfterInitialization()</code> 方法, 第 4 行就是去判断之前是不是执行过 <strong>[是否需要创建 Bean 的代理对象]</strong> 的逻辑, 如果执行过那就不会再去执行了, 没有循环依赖的对象如果需要代理都是这里产生代理对象的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#002339;--shiki-dark:#E6E6E6;--shiki-light-bg:#FFF;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes slack-ochin slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#DA5221;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;"> postProcessAfterInitialization</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(@</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">Nullable</span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;"> Object</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean, </span><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> beanName) {</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (bean </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#174781;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#0991B6;--shiki-dark:#4EC9B0;">        Object</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;"> cacheKey</span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getCacheKey</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">bean</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">getClass</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(), beanName);</span></span>
<span class="line highlighted"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#2F86D2;--shiki-dark:#9CDCFE;">earlyProxyReferences</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">remove</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(cacheKey) </span><span style="--shiki-light:#7B30D0;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean) {</span></span>
<span class="line"><span style="--shiki-light:#357B42;--shiki-dark:#6A9955;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            // 是否需要创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#000000;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#7EB233;--shiki-dark:#DCDCAA;">wrapIfNecessary</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">(bean, beanName, cacheKey);</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">        }</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7B30D0;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#002339;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">总结</p><ul><li>三个 map 结构中分别存储什么对象? <ul><li>一级缓存: 成品</li><li>二级缓存: 半成品或者半成品的代理对象</li><li>三级缓存: 是一个 <code>ObjectFactory&lt;?&gt;</code> 对象(函数式接口, 只有一个 <code>getObject()</code> 方法), 里面是一个 Lambda 表达式 <code>() -&gt; getEarlyBeanReference()</code></li></ul></li><li>三个 map 缓存的查找对象的顺序是什么样的? <ul><li>先从一级缓存找, 找不到就从二级缓存找, 找不到再从三级缓存找</li></ul></li><li>如果只有一个 map, 能否解决循环依赖的问题? <ul><li>不能. 如果只有一个 map, 那么会导致成品对象和半成品对象全部在一个 map 中, 而半成品对象是不能够暴露给外部使用的, 所以需要区分, 否则有可能暴露半成品对象</li></ul></li><li>如果只有两个 map, 能都解决循环依赖的问题?<br> 能, 但是有前提条件: 循环依赖中不包含 AOP 的处理逻辑</li><li>为什么三级缓存就可以解决循环依赖中包含代理对象的问题? <ul><li>创建代理对象的时候是否需要创建出原始对象? <ul><li>需要</li></ul></li><li>同一个容器中能都出现同名的两个不同对象? <ul><li>不能</li></ul></li><li>如果一个对象被代理, 那么代理对象和原始对象应该如何进行存储? <ul><li>如果需要代理对象, 那么代理对象创建完成之后会覆盖原始对象</li></ul></li><li>什么时候代理对象会覆盖掉原始对象? <ul><li>如果有循环依赖, 那就在 <code>getEarlyBeanReference()</code> 方法中, 会判断是否需要代理对象, 如果创建出代理对象了, 那么就会覆盖掉原始对象</li><li>正常情况是在 <code>BeanPostProcessor#postProcessAfterInitialization()</code> 方法中, 判断是否需要代理对象并返回, 否则返回原对象</li></ul></li><li>在对象对外暴露的时候, 如何准确的给出原始对象或者代理对象? <ul><li>因为正常的代理对象的创建是在 <code>BeanPostProcessor</code> 的后置处理方法中, 在解决循环依赖问题的时候还没有执行到那个地方, 而三级缓存的作用就在于此, 通过 Lambda 表达式, 实现一种类似回调的机制, 在确定要对外暴露对象的时候, 就唯一性的确定到底是代理对象还是原始对象, 这也是为什么不把对象放在二级缓存的原因</li></ul></li></ul></li></ul></div>`,41);function g(c,y){const s=h("Mermaid");return e(),l("div",null,[d,a(s,{id:"mermaid-183",code:"eJxLy8kvT85ILCpR8AniUlBIjH66bt6Tfd1Pe6bFKujq2ikkRT/tmPt0OUIgOfrJ3v3Pp6yA8FKiX05peLa+MZYLAKXJIPI="}),r,a(s,{id:"mermaid-704",code:"eJxLy8kvT85ILCrhUlBwjH7aMfvp7l0KjgpP1+98sXFhLFDQKVop4em6eU/2dT/tmQaXAUpoJNnmlebkaCYogZQ5Rz/fPRMu/XxWi0KSwtON8541LH+xf/aLhT0vtnY/bdgDUulS/bRjybNpa5+u2/l05oonO9Y+n7/06YRlz+Z0KjhBtdcClblGP5+95VnfUojGp72bn/avB2l3gzkSphgk6I7iSJgMyJGJyI70ADsSJg1yZCIOR3ridiTMjyBHeuFwpKOCrq4d0CIQ6QwmXUBkzbNNC4FG1Ci4gcXcwaQHmPREkXcEhRNEBMR1hRgEchdC0AuimwsAYlHWQA=="}),E])}const D=n(p,[["render",g],["__file","Spring_Basics.html.vue"]]),v=JSON.parse('{"path":"/docs/note/back-end/spring/Spring_Basics.html","title":"Spring 基础","lang":"zh-CN","frontmatter":{"title":"Spring 基础","date":"2024-03-09T00:00:00.000Z","description":"Spring Bean 什么是 Spring Bean 简单来说, Bean 指代的就是那些被 IoC 容器所管理的对象 IoC 容器IoC 容器 应用程序类（POJO）与配置元数据相结合, 在创建和初始化 ApplicationContext 后, 就拥有了一个完全配置和可执行的系统或应用程序 配置元数据可以是 XML 文件、注解或者 Java 配置...","head":[["meta",{"property":"og:url","content":"https://blog.white233.top/docs/note/back-end/spring/Spring_Basics.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"Spring 基础"}],["meta",{"property":"og:description","content":"Spring Bean 什么是 Spring Bean 简单来说, Bean 指代的就是那些被 IoC 容器所管理的对象 IoC 容器IoC 容器 应用程序类（POJO）与配置元数据相结合, 在创建和初始化 ApplicationContext 后, 就拥有了一个完全配置和可执行的系统或应用程序 配置元数据可以是 XML 文件、注解或者 Java 配置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.white233.top/assets/note/be/container-magic.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T09:12:43.000Z"}],["meta",{"property":"article:author","content":"White"}],["meta",{"property":"article:published_time","content":"2024-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T09:12:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 基础\\",\\"image\\":[\\"https://blog.white233.top/assets/note/be/container-magic.png\\",\\"https://blog.white233.top/assets/note/be/dynamic-proxy.jpeg\\"],\\"datePublished\\":\\"2024-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-07T09:12:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"White\\",\\"url\\":\\"https://blog.white233.top\\",\\"email\\":\\"white996@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring Bean","slug":"spring-bean","link":"#spring-bean","children":[{"level":3,"title":"什么是 Spring Bean","slug":"什么是-spring-bean","link":"#什么是-spring-bean","children":[]},{"level":3,"title":"如何声明一个 Bean","slug":"如何声明一个-bean","link":"#如何声明一个-bean","children":[]},{"level":3,"title":"Bean 的生命周期","slug":"bean-的生命周期","link":"#bean-的生命周期","children":[]}]},{"level":2,"title":"IoC 容器","slug":"ioc-容器","link":"#ioc-容器","children":[{"level":3,"title":"BeanFactory","slug":"beanfactory","link":"#beanfactory","children":[]},{"level":3,"title":"创建 IoC 容器的方式","slug":"创建-ioc-容器的方式","link":"#创建-ioc-容器的方式","children":[]},{"level":3,"title":"IoC 容器的创建过程","slug":"ioc-容器的创建过程","link":"#ioc-容器的创建过程","children":[]}]},{"level":2,"title":"AOP 代理","slug":"aop-代理","link":"#aop-代理","children":[{"level":3,"title":"AOP 的一些术语","slug":"aop-的一些术语","link":"#aop-的一些术语","children":[]},{"level":3,"title":"Spring AOP 和 AspectJ AOP 的区别","slug":"spring-aop-和-aspectj-aop-的区别","link":"#spring-aop-和-aspectj-aop-的区别","children":[]},{"level":3,"title":"AOP 通知的类型","slug":"aop-通知的类型","link":"#aop-通知的类型","children":[]},{"level":3,"title":"AOP 的应用场景","slug":"aop-的应用场景","link":"#aop-的应用场景","children":[]}]},{"level":2,"title":"循环依赖","slug":"循环依赖","link":"#循环依赖","children":[{"level":3,"title":"什么是循环依赖","slug":"什么是循环依赖","link":"#什么是循环依赖","children":[]},{"level":3,"title":"怎么解决循环依赖","slug":"怎么解决循环依赖","link":"#怎么解决循环依赖","children":[]}]}],"git":{"createdTime":1710161567000,"updatedTime":1717751563000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":3}]},"readingTime":{"minutes":23.67,"words":7100},"filePathRelative":"docs/note/back-end/spring/Spring_Basics.md","localizedDate":"2024年3月9日","excerpt":"<h2>Spring Bean</h2>\\n<h3>什么是 Spring Bean</h3>\\n<p>简单来说, Bean 指代的就是那些被 IoC 容器所管理的对象</p>\\n<figure><img src=\\"/assets/note/be/container-magic.png\\" alt=\\"IoC 容器\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>IoC 容器</figcaption></figure>\\n<p>应用程序类（POJO）与配置元数据相结合, 在创建和初始化 ApplicationContext 后, 就拥有了一个完全配置和可执行的系统或应用程序</p>","autoDesc":true}');export{D as comp,v as data};
