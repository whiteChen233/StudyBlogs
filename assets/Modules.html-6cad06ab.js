const e=JSON.parse('{"key":"v-c636b1b0","path":"/zh/note/front-end/Vue2/Modules.html","title":"模块化","lang":"zh-CN","frontmatter":{"title":"模块化","date":"2021-07-17T00:00:00.000Z","description":"参考 &gt; MDN-JavaScript modules 模块 背景 Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。 因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 Javascript 库和框架 已经开始了模块的使用（例如， CommonJS 和基于 AMD 的其他模块系统 如 RequireJS, 以及最新的 Webpack 和 Babel）。 --- 摘自 MDN","head":[["meta",{"property":"og:url","content":"https://blog.white233.top/zh/note/front-end/Vue2/Modules.html"}],["meta",{"property":"og:site_name","content":"温故而知新~"}],["meta",{"property":"og:title","content":"模块化"}],["meta",{"property":"og:description","content":"参考 &gt; MDN-JavaScript modules 模块 背景 Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。 因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 Javascript 库和框架 已经开始了模块的使用（例如， CommonJS 和基于 AMD 的其他模块系统 如 RequireJS, 以及最新的 Webpack 和 Babel）。 --- 摘自 MDN"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-03T11:18:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-03T11:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-03T11:18:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"使用模块作为出口","slug":"使用模块作为出口","link":"#使用模块作为出口","children":[{"level":3,"title":"CommonJS 中的使用","slug":"commonjs-中的使用","link":"#commonjs-中的使用","children":[]},{"level":3,"title":"ES6 中的使用","slug":"es6-中的使用","link":"#es6-中的使用","children":[]}]}],"git":{"createdTime":1677143899000,"updatedTime":1677842283000,"contributors":[{"name":"white","email":"294476387@qq.com","commits":2}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"zh/note/front-end/Vue2/Modules.md","localizedDate":"2021年7月17日","excerpt":"<p>参考 &gt; MDN-<a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaScript modules 模块</a></p>\\n<h2> 背景</h2>\\n<blockquote>\\n<p>Javascript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 Javascript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。</p>\\n<p>因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 Javascript 库和框架 已经开始了模块的使用（例如， CommonJS 和基于 AMD 的其他模块系统 如 RequireJS, 以及最新的 Webpack 和 Babel）。</p>\\n<p>--- <em>摘自 MDN</em></p>\\n</blockquote>","autoDesc":true}');export{e as data};
